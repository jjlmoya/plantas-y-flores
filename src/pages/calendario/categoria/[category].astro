---
import BaseLayout from "../../../layouts/BaseLayout.astro";
import StatsCard from "../../../components/StatsCard.vue";
import FilterPlantCard from "../../../components/FilterPlantCard.vue";
import {
  getCategoryPlantsWithCalendar,
  getGlobalCalendarConfig,
  getUIHelpers,
  getAvailableCalendarCategories,
  getAvailableActivities,
} from "../../../utils/calendar-inheritance.js";

// Generate static paths for all categories
export async function getStaticPaths() {
  try {
    console.log('Starting getStaticPaths for categories...');
    const categories = await getAvailableCalendarCategories();
    console.log(`Generated ${categories.length} category paths:`, categories);

    const result = categories.map((category) => ({
      params: { category },
    }));
    
    console.log('Finished mapping category paths');
    return result;
  } catch (error) {
    console.error('Error in getStaticPaths for categories:', error);
    return [];
  }
}

const { category } = Astro.params;

if (!category) {
  return Astro.redirect("/calendario/");
}

// Get calendar data for this category
const categoryPlants = await getCategoryPlantsWithCalendar(category);
const globalConfig = await getGlobalCalendarConfig();
const ui = getUIHelpers(globalConfig);
const activities = await getAvailableActivities();

if (categoryPlants.length === 0) {
  return Astro.redirect("/calendario/");
}

const categoryName = ui.formatCategoryName(category);
const categoryIcon = ui.getCategoryIcon(category);

// Group plants by activities across all months
const plantActivities = {};
categoryPlants.forEach((plant) => {
  const calendar = plant.calendar;

  // Collect all activities for this plant
  const activities = {
    sowing: [],
    transplanting: [],
    harvesting: [],
    flowering: [],
    pruning: [],
    planting: [],
  };

  // Extract sowing months
  if (calendar.calendar_data?.sowing) {
    if (calendar.calendar_data.sowing.indoor?.best_months) {
      activities.sowing.push(
        ...calendar.calendar_data.sowing.indoor.best_months.map((m) => ({
          month: m,
          type: "indoor",
        }))
      );
    }
    if (calendar.calendar_data.sowing.outdoor?.best_months) {
      activities.sowing.push(
        ...calendar.calendar_data.sowing.outdoor.best_months.map((m) => ({
          month: m,
          type: "outdoor",
        }))
      );
    }
  }

  // Extract other activities
  if (calendar.calendar_data?.transplanting?.best_months) {
    activities.transplanting =
      calendar.calendar_data.transplanting.best_months.map((m) => ({
        month: m,
      }));
  }

  if (calendar.calendar_data?.harvesting?.best_months) {
    activities.harvesting = calendar.calendar_data.harvesting.best_months.map(
      (m) => ({ month: m })
    );
  }

  if (calendar.calendar_data?.flowering?.best_months) {
    activities.flowering = calendar.calendar_data.flowering.best_months.map(
      (m) => ({ month: m })
    );
  }

  if (calendar.calendar_data?.planting?.best_months) {
    activities.planting = calendar.calendar_data.planting.best_months.map(
      (m) => ({ month: m })
    );
  }

  plantActivities[plant.slug] = {
    ...plant,
    activities,
  };
});

// Generate timeline data for visualization
const timelineData = Object.entries(plantActivities).map(([slug, data]) => {
  const monthsData = Array.from({ length: 12 }, (_, i) => {
    const month = i + 1;
    const activities = [];

    Object.entries(data.activities).forEach(([activityType, activityData]) => {
      if (activityData.some((item) => item.month === month)) {
        activities.push(activityType);
      }
    });

    return {
      month,
      activities,
      hasActivity: activities.length > 0,
    };
  });

  return {
    slug,
    plantName: ui.formatPlantName(slug),
    calendar: data.calendar,
    monthsData,
  };
});

// Format plants for SimpleCalendarCard component
const formattedCategoryPlants = categoryPlants.map(plant => {
  const calendar = plant.calendar?.calendar_data;
  
  // Extract months for different activities
  const sowingMonths = [];
  const transplantingMonths = [];
  const harvestingMonths = [];
  
  if (calendar?.sowing?.indoor?.best_months) {
    sowingMonths.push(...calendar.sowing.indoor.best_months);
  }
  if (calendar?.sowing?.outdoor?.best_months) {
    sowingMonths.push(...calendar.sowing.outdoor.best_months);
  }
  if (calendar?.transplanting?.best_months) {
    transplantingMonths.push(...calendar.transplanting.best_months);
  }
  if (calendar?.harvesting?.best_months) {
    harvestingMonths.push(...calendar.harvesting.best_months);
  }
  
  return {
    plantName: ui.formatPlantName(plant.slug),
    plantSlug: plant.slug,
    categorySlug: category,
    sowingMonths: [...new Set(sowingMonths)].sort(),
    transplantingMonths: [...new Set(transplantingMonths)].sort(),
    harvestingMonths: [...new Set(harvestingMonths)].sort(),
    articleLink: plant.calendar._article_links?.resolved_link || ''
  };
});
---

<BaseLayout
  title={`${categoryName} - Calendario de Cultivo | Cuándo Plantar ${categoryName}`}
  description={`Calendario completo de cultivo para ${categoryName.toLowerCase()}. Descubre cuándo sembrar, trasplantar y cosechar todas las variedades de ${categoryName.toLowerCase()}.`}
>
  <link rel="stylesheet" href="/src/styles/calendar-theme.css">
  <div class="category-view">
    <!-- Header -->
    <header class="page-header">
      <div class="container">
        <h1 class="page-title">
          <span class="category-icon">{categoryIcon}</span>
          Calendario de {categoryName}
        </h1>
        <p class="page-subtitle">
          Guía completa de cultivo para todas las variedades de {
            categoryName.toLowerCase()
          }
        </p>

        <div class="category-stats">
          <StatsCard
            client:load
            title="Variedades Disponibles"
            icon={categoryIcon}
            number={categoryPlants.length}
            label="variedades"
            description={`Diferentes tipos de ${categoryName.toLowerCase()} para cultivar`}
            variant="primary"
          />
        </div>
      </div>
    </header>

    <div class="container">
      <!-- Timeline Overview -->
      <section class="timeline-section">
        <h2>📅 Vista Temporal de {categoryName}</h2>

        <div class="timeline-container">
          <div class="timeline-header">
            <div class="plant-label">Planta</div>
            {
              Array.from({ length: 12 }, (_, i) => (
                <div class="month-label" key={i + 1}>
                  {ui.getMonthName(i + 1).slice(0, 3)}
                </div>
              ))
            }
          </div>

          <div class="timeline-body">
            {
              timelineData.map((plant) => (
                <div class="timeline-row" key={plant.slug}>
                  <div class="plant-name">
                    <a href={`/calendario/${category}/${plant.slug}/`}>
                      {plant.plantName}
                    </a>
                    {plant.calendar._article_links?.resolved_link && (
                      <a
                        href={plant.calendar._article_links.resolved_link}
                        class="article-link"
                        title="Ver artículo completo"
                      >
                        📖
                      </a>
                    )}
                  </div>

                  {plant.monthsData.map((monthData) => (
                    <div
                      class={`month-cell ${monthData.hasActivity ? "has-activity" : ""}`}
                      key={monthData.month}
                      title={
                        monthData.activities.length > 0
                          ? `${ui.getMonthName(monthData.month)}: ${monthData.activities.map((a) => ui.formatTaskName(a)).join(", ")}`
                          : ui.getMonthName(monthData.month)
                      }
                    >
                      <div class="activity-indicators">
                        {monthData.activities.includes("sowing") && (
                          <span
                            class="activity-dot sowing"
                            style={`background-color: ${ui.getActivityColor("sowing")}`}
                          />
                        )}
                        {monthData.activities.includes("transplanting") && (
                          <span
                            class="activity-dot transplanting"
                            style={`background-color: ${ui.getActivityColor("transplanting")}`}
                          />
                        )}
                        {monthData.activities.includes("harvesting") && (
                          <span
                            class="activity-dot harvesting"
                            style={`background-color: ${ui.getActivityColor("harvesting")}`}
                          />
                        )}
                        {monthData.activities.includes("flowering") && (
                          <span
                            class="activity-dot flowering"
                            style={`background-color: ${ui.getActivityColor("flowering")}`}
                          />
                        )}
                        {monthData.activities.includes("planting") && (
                          <span
                            class="activity-dot planting"
                            style={`background-color: ${ui.getActivityColor("planting")}`}
                          />
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              ))
            }
          </div>
        </div>
        <section class="legend-section">
          <div class="legend-grid">
            <div class="legend-item">
              <span
                class="legend-dot"
                style={`background-color: ${ui.getActivityColor("sowing")}`}
              ></span>
              <span>Siembra</span>
            </div>
            <div class="legend-item">
              <span
                class="legend-dot"
                style={`background-color: ${ui.getActivityColor("transplanting")}`}
              ></span>
              <span>Trasplante</span>
            </div>
            <div class="legend-item">
              <span
                class="legend-dot"
                style={`background-color: ${ui.getActivityColor("harvesting")}`}
              ></span>
              <span>Cosecha</span>
            </div>
            <div class="legend-item">
              <span
                class="legend-dot"
                style={`background-color: ${ui.getActivityColor("flowering")}`}
              ></span>
              <span>Floración</span>
            </div>
            <div class="legend-item">
              <span
                class="legend-dot"
                style={`background-color: ${ui.getActivityColor("planting")}`}
              ></span>
              <span>Plantación</span>
            </div>
          </div>
        </section>
      </section>

      <!-- Plants Grid -->
      <section class="plants-grid-section">
        <h2>🌱 Todas las Variedades de {categoryName}</h2>
        
        <div class="plants-grid">
          {categoryPlants.map(plant => (
            <FilterPlantCard
              client:load
              key={`${plant.category}-${plant.slug}`}
              plant={plant}
            />
          ))}
        </div>
      </section>

      <!-- Back Navigation -->
      <div class="back-navigation">
        <a href="/calendario/" class="back-link">← Volver al Calendario</a>
      </div>
    </div>
  </div>
</BaseLayout>

<style>
  .category-view {
    min-height: 100vh;
    background: var(--bg-primary-gradient);
  }


  .container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 1rem;
  }

  .category-icon {
    font-size: 2.5rem;
  }

  .plants-grid-section {
    margin-bottom: var(--space-xl);
  }

  .plants-grid-section h2 {
    color: var(--color-text-primary);
    margin-bottom: var(--space-lg);
    font-size: var(--font-size-xl);
  }

  .plants-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1rem;
  }


  .category-stats {
    display: flex;
    justify-content: center;
    gap: 2rem;
  }

  .stat {
    text-align: center;
    background: rgba(255, 255, 255, 0.1);
    padding: 1rem 2rem;
    border-radius: 8px;
  }

  .stat-number {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    line-height: 1;
  }

  .stat-label {
    font-size: 0.9rem;
    opacity: 0.8;
    margin-top: 0.25rem;
  }

  .timeline-section {
    background: var(--bg-card);
    border-radius: var(--radius-md);
    padding: var(--space-xl);
    box-shadow: var(--shadow-sm);
    margin-bottom: var(--space-lg);
  }

  .timeline-section h2 {
    color: var(--color-text-primary);
    margin-bottom: var(--space-md);
    font-size: var(--font-size-xl);
  }

  .timeline-container {
    overflow-x: auto;
    border: 1px solid var(--color-border);
    border-radius: var(--radius-sm);
  }

  .timeline-header {
    display: grid;
    grid-template-columns: 200px repeat(12, 1fr);
    background: var(--bg-subtle);
    border-bottom: 1px solid var(--color-border);
  }

  .plant-label {
    padding: var(--space-md);
    font-weight: 600;
    color: var(--color-text-primary);
    border-right: 1px solid var(--color-border);
  }

  .month-label {
    padding: var(--space-md) var(--space-sm);
    text-align: center;
    font-weight: 500;
    color: var(--color-text-secondary);
    font-size: var(--font-size-xs);
  }

  .timeline-body {
    background: var(--bg-card);
  }

  .timeline-row {
    display: grid;
    grid-template-columns: 200px repeat(12, 1fr);
    border-bottom: 1px solid var(--color-border-light);
  }

  .timeline-row:hover {
    background: var(--bg-subtle);
  }

  .plant-name {
    padding: 1rem;
    border-right: 1px solid var(--color-border);
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  .plant-name a {
    color: var(--color-text-primary);
    text-decoration: none;
    font-weight: 500;
  }

  .plant-name a:hover {
    color: var(--color-primary);
  }

  .article-link {
    font-size: 0.9rem;
    text-decoration: none;
    opacity: 0.7;
    transition: opacity 0.3s ease;
  }

  .article-link:hover {
    opacity: 1;
  }

  .month-cell {
    padding: 1rem 0.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 60px;
  }

  .month-cell.has-activity {
    background: var(--bg-subtle);
  }

  .activity-indicators {
    display: flex;
    flex-wrap: wrap;
    gap: 3px;
    justify-content: center;
  }

  .activity-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    display: block;
  }

  .legend-section {
    background: var(--bg-card);
    border-radius: var(--radius-md);
    padding: var(--space-lg);
    margin-bottom: var(--space-lg);
    box-shadow: var(--shadow-sm);
  }

  .legend-section h3 {
    color: var(--color-text-primary);
    margin-bottom: var(--space-md);
  }

  .legend-grid {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
  }

  .legend-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.9rem;
    color: var(--color-text-secondary);
  }

  .legend-dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    display: block;
  }



  .back-navigation {
    text-align: center;
    padding: 2rem 0;
  }

  .back-link {
    background: #667eea;
    color: white;
    padding: 0.75rem 2rem;
    border-radius: 8px;
    text-decoration: none;
    font-weight: 500;
    transition: background 0.3s ease;
  }

  .back-link:hover {
    background: #5a67d8;
  }

  @media (max-width: 768px) {
    .category-title h1 {
      font-size: 2rem;
      flex-direction: column;
      gap: 0.5rem;
    }

    .timeline-header {
      grid-template-columns: 150px repeat(12, 60px);
    }

    .timeline-row {
      grid-template-columns: 150px repeat(12, 60px);
    }

    .plant-label {
      padding: 0.75rem;
    }

    .month-label {
      padding: 0.75rem 0.25rem;
      font-size: 0.8rem;
    }

    .plants-grid {
      grid-template-columns: 1fr;
    }

    .card-header {
      flex-direction: column;
      align-items: stretch;
    }

    .view-article-btn {
      margin-left: 0;
      margin-top: 0.5rem;
      text-align: center;
    }
  }
</style>