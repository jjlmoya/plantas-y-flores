---
import BaseLayout from '../../../layouts/BaseLayout.astro';
import HeaderExport from '../../../components/HeaderExport.vue';
import ScovilleCard from '../../../components/ScovilleCard.vue';
import { getPlantCalendarWithUI, getGlobalCalendarConfig, getUIHelpers, generatePlantPaths, getOriginFlag, getAvailableCalendarCategories } from '../../../utils/calendar-inheritance.js';

// Generate static paths for all plants
export async function getStaticPaths() {
  try {
    const plantPaths = await generatePlantPaths();
    
    const result = plantPaths.map(({ params, props }) => ({
      params: { 
        category: params.category,
        plant: params.plant
      },
      props
    }));
    
    return result;
  } catch (error) {
    console.error('Error in getStaticPaths for plants:', error);
    return [];
  }
}

const { category, plant: plantSlug } = Astro.params;

if (!category || !plantSlug) {
  return Astro.redirect('/calendario/');
}

// Get plant calendar data with UI helpers
const plantCalendar = await getPlantCalendarWithUI(category, plantSlug);
const globalConfig = await getGlobalCalendarConfig();
const ui = getUIHelpers(globalConfig);
const availableCategories = await getAvailableCalendarCategories();

if (!plantCalendar || !plantCalendar._inheritance.has_plant_specific && !plantCalendar._inheritance.has_category) {
  return Astro.redirect('/calendario/');
}

const categoryName = ui.formatCategoryName(category);
const plantIndividualName = ui.formatPlantName(plantSlug);
const plantName = `${categoryName} ${plantIndividualName}`;
const categoryIcon = ui.getCategoryIcon(category);

// Process calendar data for timeline view
const timelineData = [];

// Generate 12-month timeline
for (let month = 1; month <= 12; month++) {
  const monthData = {
    month,
    monthName: ui.getMonthName(month),
    activities: []
  };

  const calendar = plantCalendar.calendar_data || {};

  // Check sowing activities
  if (calendar.sowing) {
    if (calendar.sowing.indoor?.best_months?.includes(month)) {
      monthData.activities.push({
        type: 'sowing',
        subtype: 'indoor',
        label: 'Siembra Interior',
        color: ui.getActivityColor('sowing'),
        icon: ui.getTaskIcon('prepare_seedbeds'),
        details: calendar.sowing.indoor.temperature_range ? 
          `${calendar.sowing.indoor.temperature_range[0]}-${calendar.sowing.indoor.temperature_range[1]}°C` : null
      });
    }
    
    if (calendar.sowing.outdoor?.best_months?.includes(month)) {
      monthData.activities.push({
        type: 'sowing',
        subtype: 'outdoor',
        label: 'Siembra Exterior',
        color: ui.getActivityColor('sowing'),
        icon: ui.getTaskIcon('prepare_seedbeds'),
        details: calendar.sowing.outdoor.temperature_range ? 
          `${calendar.sowing.outdoor.temperature_range[0]}-${calendar.sowing.outdoor.temperature_range[1]}°C` : null
      });
    }
  }

  // Check transplanting
  if (calendar.transplanting?.best_months?.includes(month)) {
    monthData.activities.push({
      type: 'transplanting',
      label: 'Trasplante',
      color: ui.getActivityColor('transplanting'),
      icon: ui.getTaskIcon('transplant'),
      details: calendar.transplanting.soil_temperature_min ? 
        `Suelo min: ${calendar.transplanting.soil_temperature_min}°C` : null
    });
  }

  // Check harvesting
  if (calendar.harvesting?.best_months?.includes(month)) {
    const isPeak = calendar.harvesting.peak_months?.includes(month);
    monthData.activities.push({
      type: 'harvesting',
      label: isPeak ? 'Cosecha Principal' : 'Cosecha',
      color: ui.getActivityColor('harvesting'),
      icon: ui.getTaskIcon(isPeak ? 'harvest_main' : 'harvest_early'),
      priority: isPeak ? 'high' : 'medium',
      details: calendar.harvesting.days_to_harvest ? 
        `${calendar.harvesting.days_to_harvest[0]}-${calendar.harvesting.days_to_harvest[1]} días` : null
    });
  }

  // Check flowering (for perennials)
  if (calendar.flowering?.best_months?.includes(month)) {
    const isPeak = calendar.flowering.peak_months?.includes(month);
    monthData.activities.push({
      type: 'flowering',
      label: isPeak ? 'Floración Principal' : 'Floración',
      color: ui.getActivityColor('flowering'),
      icon: ui.getTaskIcon('enjoy_blooms'),
      priority: isPeak ? 'high' : 'medium'
    });
  }

  // Check planting (for perennials)
  if (calendar.planting?.best_months?.includes(month)) {
    monthData.activities.push({
      type: 'planting',
      label: 'Plantación',
      color: ui.getActivityColor('planting'),
      icon: ui.getTaskIcon('prepare_beds')
    });
  }

  // Check monthly tasks (avoid duplicating planting, sowing if already added)
  const monthlyTasks = calendar.care_calendar?.monthly_tasks?.[month.toString()];
  if (monthlyTasks && monthlyTasks.length > 0) {
    // Get already added activity types and subtypes to avoid duplicates
    const existingTypes = monthData.activities.map(a => a.type);
    const existingSubtypes = monthData.activities.map(a => a.subtype).filter(Boolean);
    
    monthlyTasks.forEach(task => {
      // Skip planting task if we already added a planting activity
      if (task === 'planting' && existingTypes.includes('planting')) {
        return;
      }
      
      // Skip sowing tasks if we already added the specific sowing type
      if ((task === 'sowing_indoor' || task === 'sow_indoor') && existingSubtypes.includes('indoor')) {
        return;
      }
      if ((task === 'sowing_outdoor' || task === 'sow_outdoor') && existingSubtypes.includes('outdoor')) {
        return;
      }
      
      // Skip general sowing if we already have any sowing activity
      if (task === 'sowing' && existingTypes.includes('sowing')) {
        return;
      }
      
      // Skip harvesting tasks if we already have general harvesting
      if ((task === 'harvest_winter' || task === 'harvest_summer' || task === 'harvest_early') && existingTypes.includes('harvesting')) {
        return;
      }
      
      // Skip transplanting task if we already added a transplanting activity
      if (task === 'transplant' && existingTypes.includes('transplanting')) {
        return;
      }
      
      // Skip planting tasks if we already have sowing (they're similar)
      if (task === 'planting' && existingTypes.includes('sowing')) {
        return;
      }
      
      monthData.activities.push({
        type: 'care',
        label: ui.formatTaskName(task),
        color: ui.getActivityColor('care'),
        icon: ui.getTaskIcon(task),
        priority: ui.getTaskPriority(task)
      });
    });
  }

  timelineData.push(monthData);
}

// Group plant info
const plantInfo = {
  scientific_name: plantCalendar.plant_info?.scientific_name,
  common_names: plantCalendar.plant_info?.common_names,
  origin: plantCalendar.plant_info?.origin,
  type: plantCalendar.plant_info?.type,
  difficulty: plantCalendar.plant_info?.difficulty,
  family: plantCalendar.plant_info?.family
};

const growingConditions = plantCalendar.growing_conditions || {};
const harvestData = plantCalendar.harvest_data || {};
const nutritionalData = plantCalendar.nutritional_data || {};
const flowerData = plantCalendar.flower_data || {};
const scovilleData = plantCalendar.scoville_data || null;

// Article link
const articleLink = plantCalendar._article_links?.resolved_link;

// Translate companion plant names from English to Spanish and check if they have categories
function translateAndCheckCompanionPlants(companions) {
  const translations = {
    'muscari': 'Muscari',
    'narcisos': 'Narcisos', 
    'crocus': 'Crocus',
    'daffodils': 'Narcisos',
    'snowdrops': 'Campanillas de Invierno',
    'allium': 'Allium',
    'hyacinth': 'Jacinto',
    'iris': 'Iris',
    'fritillaria': 'Fritilaria',
    'scilla': 'Escila',
    'chionodoxa': 'Gloria de las Nieves',
    'galanthus': 'Campanilla de Invierno',
    'narcissus': 'Narciso',
    'basil': 'albahaca',
    'tomato': 'tomate',
    'rose': 'rosa',
    'lavender': 'lavanda',
    'thyme': 'tomillo',
    'chamomile': 'manzanilla',
    'strawberry': 'fresa',
    'chilli': 'chili',
    'potato': 'patata',
    'cabbage': 'col',
    'orchid': 'orquidea',
    'tulip': 'tulipan',
    'hibiscus': 'hibiscus',
    'lily': 'lirios',
    'mango': 'mango',
    'banana': 'plátano',
    'pineapple': 'piña',
    // Traducciones faltantes para companions
    'cotton': 'algodón',
    'maize': 'maíz',
    'corn': 'maíz', 
    'legumes': 'leguminosas',
    'rosemary': 'romero',
    'sage': 'salvia',
    'onion': 'cebolla',
    'garlic': 'ajo',
    'celery': 'apio',
    'parsley': 'perejil',
    'oregano': 'orégano',
    'mint': 'menta',
    'dill': 'eneldo',
    'chives': 'cebollino',
    'walnut': 'nogal',
    'fennel': 'hinojo',
    'borage': 'borraja',
    'marigold': 'margarita',
    'petunia': 'petunia',
    'nasturtium': 'capuchina'
  };
  
  if (!companions || !Array.isArray(companions)) return [];
  
  return companions.map(companion => {
    const translatedName = translations[companion.toLowerCase()] || companion;
    const categoryExists = availableCategories.includes(translatedName.toLowerCase());
    
    return {
      originalName: companion,
      translatedName: translatedName,
      hasCategory: categoryExists,
      categorySlug: categoryExists ? translatedName.toLowerCase() : null
    };
  });
}

const processedCompanions = translateAndCheckCompanionPlants(growingConditions.companion_plants);
const processedAvoidPlants = translateAndCheckCompanionPlants(growingConditions.avoid_plants);

// Nutrient icon helper function
function getNutrientIcon(nutrient) {
  const iconMap = {
    // Vitamins
    'vitamin_c': '🍊',
    'vitamin_a': '🥕',
    'vitamin_k': '🥬',
    'vitamin_b9': '🌿',
    'vitamin_d': '☀️',
    'vitamin_e': '🌰',
    'vitamin_b': '🌾',
    'vitamina_c': '🍊',
    'vitamina_k': '🥬',
    'vitamina_a': '🥕',
    
    // Minerals
    'potasio': '🍌',
    'potassium': '🍌',
    'iron': '🔨',
    'calcium': '🦴',
    'magnesium': '⚡',
    'phosphorus': '🧠',
    'zinc': '⚙️',
    'manganese': '⚙️',
    'manganeso': '⚙️',
    
    // Other nutrients
    'fiber': '🌾',
    'fibra': '🌾',
    'protein': '🥩',
    'proteina': '🥩',
    'antioxidants': '🛡️',
    'antioxidantes': '🛡️',
    'folate': '🌿',
    'folatos': '🌿',
    'licopeno': '🍅',
    'beta_carotene': '🥕',
    'capsaicin': '🌶️',
    
    // Default
    'default': '💊'
  };
  
  const key = nutrient.toLowerCase().replace(/\s+/g, '_');
  return iconMap[key] || iconMap.default;
}

// Generate dynamic Schema FAQ based on plant data
function generateSchemaFAQ() {
  const faq = [];
  const calendar = plantCalendar.calendar_data || {};

  // Universal planting/sowing question - adapts to any plant type
  const hasPlanting = calendar.planting?.best_months;
  const hasSowing = calendar.sowing?.indoor?.best_months || calendar.sowing?.outdoor?.best_months || calendar.sowing?.best_months;
  
  if (hasPlanting || hasSowing) {
    let months = [];
    let verb = "";
    let details = "";
    
    if (hasPlanting) {
      months = calendar.planting.best_months;
      verb = "se planta";
      if (calendar.planting.soil_temperature_max) {
        details += `, cuando la temperatura del suelo esté por debajo de ${calendar.planting.soil_temperature_max}°C`;
      }
      if (calendar.planting.soil_temperature_min) {
        details += `, cuando la temperatura del suelo esté por encima de ${calendar.planting.soil_temperature_min}°C`;
      }
      if (calendar.planting.planting_depth) {
        details += `. Plantar a una profundidad de ${calendar.planting.planting_depth}`;
      }
    } else if (hasSowing) {
      // Handle sowing (seeds)
      if (calendar.sowing.indoor?.best_months) {
        months.push(...calendar.sowing.indoor.best_months);
      }
      if (calendar.sowing.outdoor?.best_months) {
        months.push(...calendar.sowing.outdoor.best_months);
      }
      if (calendar.sowing.best_months) {
        months.push(...calendar.sowing.best_months);
      }
      verb = "se siembra";
      
      if (calendar.sowing.indoor?.temperature_range || calendar.sowing.outdoor?.temperature_range) {
        const tempRange = calendar.sowing.indoor?.temperature_range || calendar.sowing.outdoor?.temperature_range;
        details += `, con temperatura óptima entre ${tempRange[0]}-${tempRange[1]}°C`;
      }
    }
    
    const uniqueMonths = [...new Set(months)].sort();
    const monthNames = uniqueMonths.map(m => ui.getMonthName(m));
    
    let answer = `${plantName} ${verb} `;
    if (monthNames.length <= 2) {
      answer += `en ${monthNames.join(' y ')}`;
    } else {
      answer += `desde ${monthNames[0]} hasta ${monthNames[monthNames.length - 1]}`;
    }
    
    answer += details;
    
    faq.push({
      question: `¿Cuándo ${hasPlanting ? 'plantar' : 'sembrar'} ${plantName}?`,
      answer: answer
    });
  }


  // Universal flowering/harvesting question - adapts to any plant type
  if (calendar.flowering?.best_months) {
    const floweringMonths = calendar.flowering.best_months.map(m => ui.getMonthName(m));
    let answer = `${plantName} florece `;
    if (floweringMonths.length <= 2) {
      answer += `en ${floweringMonths.join(' y ')}`;
    } else {
      answer += `desde ${floweringMonths[0]} hasta ${floweringMonths[floweringMonths.length - 1]}`;
    }
    
    if (calendar.flowering.peak_months) {
      const peakMonths = calendar.flowering.peak_months.map(m => ui.getMonthName(m));
      answer += `, con floración más intensa en ${peakMonths.join(' y ')}`;
    }
    
    if (flowerData?.bloom_duration) {
      answer += `. La floración dura aproximadamente ${flowerData.bloom_duration}`;
    }
    
    faq.push({
      question: `¿Cuándo florece ${plantName}?`,
      answer: answer
    });
  }

  // Universal harvesting question - for any plant with harvest data
  if (calendar.harvesting?.best_months) {
    const harvestMonths = calendar.harvesting.best_months.map(m => ui.getMonthName(m));
    let answer = `La cosecha de ${plantName} se realiza `;
    if (harvestMonths.length <= 2) {
      answer += `en ${harvestMonths.join(' y ')}`;
    } else {
      answer += `desde ${harvestMonths[0]} hasta ${harvestMonths[harvestMonths.length - 1]}`;
    }
    
    if (calendar.harvesting.days_to_harvest) {
      const days = calendar.harvesting.days_to_harvest;
      answer += `, aproximadamente entre ${days[0]}-${days[1]} días después de la siembra`;
    }
    
    if (harvestData?.harvest_indicators?.length > 0) {
      const indicators = harvestData.harvest_indicators.map(ind => ui.formatTaskName(ind));
      answer += `. Indicadores de cosecha: ${indicators.join(', ')}.`;
    }
    
    faq.push({
      question: `¿Cuándo cosechar ${plantName}?`,
      answer: answer
    });
  }

  // Universal transplanting question - for any plant with transplant data  
  if (calendar.transplanting?.best_months) {
    const transplantMonths = calendar.transplanting.best_months.map(m => ui.getMonthName(m));
    let answer = `${plantName} se trasplanta `;
    if (transplantMonths.length <= 2) {
      answer += `en ${transplantMonths.join(' y ')}`;
    } else {
      answer += `desde ${transplantMonths[0]} hasta ${transplantMonths[transplantMonths.length - 1]}`;
    }
    
    if (calendar.transplanting.soil_temperature_min) {
      answer += `, cuando el suelo alcance al menos ${calendar.transplanting.soil_temperature_min}°C`;
    }
    
    answer += '. Es importante esperar a que las plántulas tengan el tamaño adecuado y hayan pasado las últimas heladas.';
    
    faq.push({
      question: `¿Cuándo trasplantar ${plantName}?`,
      answer: answer
    });
  }

  // Care/maintenance question if monthly tasks exist
  const hasCareTasks = Object.values(calendar.care_calendar?.monthly_tasks || {}).some(tasks => tasks.length > 0);
  if (hasCareTasks) {
    let answer = `${plantName} requiere cuidados específicos según la época: `;
    
    const careByMonth = Object.entries(calendar.care_calendar?.monthly_tasks || {})
      .filter(([_, tasks]) => tasks.length > 0)
      .map(([month, tasks]) => ({
        month: ui.getMonthName(parseInt(month)),
        tasks: tasks.map(task => ui.formatTaskName(task)).join(', ')
      }));
    
    if (careByMonth.length > 0) {
      answer += careByMonth.slice(0, 3).map(care => 
        `${care.month}: ${care.tasks}`
      ).join('; ');
      
      if (careByMonth.length > 3) {
        answer += '. Otros cuidados varían según el mes específico.';
      }
    }
    
    faq.push({
      question: `¿Qué cuidados necesita ${plantName}?`,
      answer: answer
    });
  }

  return faq;
}

const schemaFAQ = generateSchemaFAQ();

// Prepare export data
const plantExportData = {
  plantName,
  timelineData
};
---

<BaseLayout 
  title={`Calendario de cultivo del ${plantName.toLowerCase()} ${new Date().getFullYear()}: siembra, trasplante y cosecha`}
  description={`🌱 Guía completa de cultivo para ${plantName}. Calendario detallado con fechas de siembra, trasplante y cosecha. ${plantInfo.scientific_name ? `${plantInfo.scientific_name}. ` : ''}Aprende cuándo y cómo cultivar ${plantName} paso a paso.`}
  keywords={`${plantName}, cultivo ${plantName}, calendario ${plantName}, plantar ${plantName}, sembrar ${plantName}, ${plantInfo.scientific_name || ''}, ${categoryName}`}
  type="article"
  canonical={`https://plantasyflores.online/calendario/${category}/${plantSlug}/`}
  category={categoryName}
  publishedDate={new Date().toISOString()}
  modifiedDate={new Date().toISOString()}
  noAds={true}
>
  <link rel="stylesheet" href="/styles/calendar-theme.css">
  
  <div class="plant-calendar-view">
    <div class="modern-header">
      <!-- Breadcrumb Navigation -->
      <nav class="breadcrumb-nav">
        <div class="container">
          <div class="breadcrumb-container">
            <a href="/" class="breadcrumb-link">
              <span class="breadcrumb-icon">🏠</span>
              <span>Inicio</span>
            </a>
            <span class="breadcrumb-separator">→</span>
            <a href="/calendario/" class="breadcrumb-link">
              <span class="breadcrumb-icon">📅</span>
              <span>Calendario</span>
            </a>
            <span class="breadcrumb-separator">→</span>
            <a href={`/calendario/categoria/${category}/`} class="breadcrumb-link">
              <span class="breadcrumb-icon">{categoryIcon}</span>
              <span>{categoryName}</span>
            </a>
            <span class="breadcrumb-separator">→</span>
            <span class="breadcrumb-current">
              <span class="breadcrumb-icon">{categoryIcon}</span>
              <span>{plantIndividualName}</span>
            </span>
          </div>
        </div>
      </nav>

      <!-- Hero Section -->
      <header class="hero-header">
        <div class="container">
          <div class="hero-content">
            <div class="category-badge">
              <span class="category-badge-icon">{categoryIcon}</span>
              <span>Calendario de Cultivo</span>
            </div>
            <h1 class="plant-title">
              <span class="plant-icon-large">{categoryIcon}</span>
              <span class="title-text">Calendario de {plantName}</span>
            </h1>
            {plantInfo.scientific_name && (
              <p class="scientific-name">{plantInfo.scientific_name}</p>
            )}
            <p class="plant-description">
              Guía completa de cultivo para {plantName.toLowerCase()}. Encuentra las mejores fechas para sembrar, 
              trasplantar y cosechar, adaptadas a tu zona climática.
            </p>
            
            <!-- Plant Info Cards -->
            <div class="plant-info-grid">
              {plantInfo.family && (
                <div class="info-card">
                  <span class="info-icon">🏛️</span>
                  <div class="info-content">
                    <span class="info-label">Familia</span>
                    <span class="info-value">{plantInfo.family}</span>
                  </div>
                </div>
              )}
              {plantInfo.type && (
                <div class="info-card">
                  <span class="info-icon">🔄</span>
                  <div class="info-content">
                    <span class="info-label">Tipo</span>
                    <span class="info-value">{ui.formatTaskName(plantInfo.type)}</span>
                  </div>
                </div>
              )}
              {plantInfo.difficulty && (
                <div class="info-card">
                  <span class="info-icon">{plantInfo.difficulty === 'easy' ? '😊' : plantInfo.difficulty === 'intermediate' ? '🤔' : '😰'}</span>
                  <div class="info-content">
                    <span class="info-label">Dificultad</span>
                    <span class="info-value">{ui.formatTaskName(plantInfo.difficulty)}</span>
                  </div>
                </div>
              )}
              {plantInfo.origin && (
                <div class="info-card">
                  <span class="info-icon">{getOriginFlag(plantInfo.origin)}</span>
                  <div class="info-content">
                    <span class="info-label">Origen</span>
                    <span class="info-value">{ui.formatOriginName(plantInfo.origin)}</span>
                  </div>
                </div>
              )}
            </div>

            <!-- Action Buttons -->
            <div class="action-buttons">
              <HeaderExport 
                client:load
                exportData={plantExportData}
                exportType="plant"
                title={`Calendario ${plantName}`}
              />
              {articleLink && (
                <a href={articleLink} class="main-article-btn">
                  📖 Ver Artículo Completo
                </a>
              )}
            </div>
          </div>
        </div>
      </header>
    </div>

    <div class="container content-container main-content">
      
      <!-- Introduction Section -->
      <section class="intro-section">
        <div class="intro-content">
          <p>
            Esta <strong>guía completa de cultivo de {plantName}</strong> te ayuda a planificar la <em>siembra</em>, 
            <em>trasplante</em> y <em>cosecha</em> mes a mes. Este calendario agrícola incluye las mejores fechas 
            para cultivar, cuidados específicos y consejos de jardinería orgánica adaptados a tu zona climática 
            y condiciones locales.
          </p>
          <p>
            <strong>Cómo usar este calendario:</strong> Las actividades mostradas están organizadas por meses, 
            indicando cuándo sembrar, trasplantar y cosechar. Los iconos de color indican la prioridad 
            de cada tarea, y las temperaturas ayudan a determinar el momento exacto según tu zona.
          </p>
        </div>
      </section>

      <!-- Timeline Section -->
      <section class="timeline-section">
        <h2>📅 Calendario Anual de {plantName}</h2>
        
        <!-- Mobile Timeline -->
        <div class="timeline-mobile">
          {timelineData.map(monthData => (
            <div 
              class={`timeline-month-mobile ${monthData.activities.length > 0 ? 'has-activities' : ''}`}
              key={`mobile-${monthData.month}`}
            >
              <div class="timeline-month-header-mobile">
                <div class="timeline-month-name-mobile">{monthData.monthName}</div>
                <div class="timeline-month-number-mobile">{monthData.month}</div>
              </div>
              
              {monthData.activities.length > 0 ? (
                <div class="timeline-activities-mobile">
                  {monthData.activities.map((activity, index) => (
                    <div 
                      class={`timeline-activity-mobile ${activity.type} ${activity.priority || 'normal'}`}
                      key={`mobile-${index}`}
                    >
                      <div class="timeline-activity-icon-mobile">
                        {activity.icon}
                      </div>
                      <div class="timeline-activity-content-mobile">
                        <div class="timeline-activity-label-mobile">{activity.label}</div>
                        {activity.details && (
                          <div class="timeline-activity-details-mobile">
                            {activity.details}
                          </div>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div class="timeline-no-activities-mobile">
                  Mantenimiento general
                </div>
              )}
            </div>
          ))}
        </div>

        <!-- Desktop Timeline -->
        <div class="timeline-desktop">
          <div class="yearly-timeline">
            <div class="timeline-months">
              {timelineData.map(monthData => (
                <div 
                  class={`timeline-month ${monthData.activities.length > 0 ? 'has-activities' : ''}`}
                  key={monthData.month}
                >
                  <div class="month-header">
                    <h3>{monthData.monthName}</h3>
                    <span class="month-number">{monthData.month}</span>
                  </div>
                  
                  <div class="month-activities">
                    {monthData.activities.length > 0 ? (
                      <div class="activities-list">
                        {monthData.activities.map((activity, index) => (
                          <div 
                            class={`activity-item ${activity.priority || 'normal'}`}
                            key={index}
                            style={`border-left-color: ${activity.color}`}
                          >
                            <div class="activity-header">
                              <span class="activity-icon">{activity.icon}</span>
                              <span class="activity-label">{activity.label}</span>
                            </div>
                            {activity.details && (
                              <div class="activity-details">
                                {activity.details}
                              </div>
                            )}
                          </div>
                        ))}
                      </div>
                    ) : (
                      <div class="no-activities">
                        <span>Mantenimiento general</span>
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </section>

      <!-- Scoville Information (for chili plants) -->
      {scovilleData && (
        <ScovilleCard 
          client:visible
          scovilleData={scovilleData}
        />
      )}

      <!-- Plant Details Grid -->
      <div class="details-grid">
        <!-- Growing Conditions -->
        <section class="details-card">
          <h3>🌱 Condiciones de Cultivo</h3>
          <div class="conditions-grid">
            {growingConditions.sun_requirements && (
              <div class="condition-item">
                <span class="condition-icon">☀️</span>
                <div>
                  <strong>Luz</strong>
                  <p>{ui.formatTaskName(growingConditions.sun_requirements)}</p>
                </div>
              </div>
            )}

            {growingConditions.water_needs && (
              <div class="condition-item">
                <span class="condition-icon">💧</span>
                <div>
                  <strong>Agua</strong>
                  <p>{ui.formatTaskName(growingConditions.water_needs)}</p>
                </div>
              </div>
            )}

            {growingConditions.soil_type && (
              <div class="condition-item">
                <span class="condition-icon">🌍</span>
                <div>
                  <strong>Suelo</strong>
                  <p>{ui.formatTaskName(growingConditions.soil_type)}</p>
                </div>
              </div>
            )}

            {growingConditions.soil_ph && (
              <div class="condition-item">
                <span class="condition-icon">⚗️</span>
                <div>
                  <strong>pH</strong>
                  <p>{growingConditions.soil_ph[0]} - {growingConditions.soil_ph[1]}</p>
                </div>
              </div>
            )}

            {growingConditions.spacing && (
              <div class="condition-item">
                <span class="condition-icon">📏</span>
                <div>
                  <strong>Espaciado</strong>
                  <p>{growingConditions.spacing.plant_distance}cm entre plantas</p>
                </div>
              </div>
            )}
          </div>
        </section>

        <!-- Harvest Information -->
        {(harvestData.storage_life || harvestData.weight_range || harvestData.preservation_methods) && (
          <section class="details-card">
            <h3>🌾 Información de Cosecha</h3>
            <div class="harvest-info">
              {harvestData.storage_life && (
                <div class="harvest-item">
                  <span class="harvest-icon">📦</span>
                  <div>
                    <strong>Conservación</strong>
                    <p>{harvestData.storage_life} días</p>
                  </div>
                </div>
              )}

              {harvestData.weight_range && (
                <div class="harvest-item">
                  <span class="harvest-icon">⚖️</span>
                  <div>
                    <strong>Peso</strong>
                    <p>{harvestData.weight_range[0]}-{harvestData.weight_range[1]}g</p>
                  </div>
                </div>
              )}

              {harvestData.preservation_methods && (
                <div class="harvest-item">
                  <span class="harvest-icon">🥫</span>
                  <div>
                    <strong>Conservación</strong>
                    <p>{harvestData.preservation_methods.map(method => ui.formatTaskName(method)).join(', ')}</p>
                  </div>
                </div>
              )}
            </div>
          </section>
        )}

        <!-- Companion Plants -->
        {(processedCompanions.length > 0 || processedAvoidPlants.length > 0) && (
          <section class="details-card">
            <h3>🤝 Plantas Compañeras</h3>
            
            {processedCompanions.length > 0 && (
              <div class="companions-section">
                <h4 class="companions-title good">✅ Buenas Compañeras</h4>
                <div class="companions-list">
                  {processedCompanions.map(companion => {
                    const CompanionElement = companion.hasCategory ? 'a' : 'span';
                    return (
                      <CompanionElement 
                        href={companion.hasCategory ? `/calendario/categoria/${companion.categorySlug}/` : undefined}
                        class={`companion-tag good ${companion.hasCategory ? 'clickable' : 'no-link'}`}
                        key={companion.originalName}
                        title={companion.hasCategory ? `Ver calendario de ${companion.translatedName}` : `${companion.translatedName} (no disponible)`}
                      >
                        <span class="companion-icon">{ui.getCategoryIcon(companion.categorySlug || 'default')}</span>
                        {companion.translatedName}
                        {!companion.hasCategory && <span class="no-link-indicator">*</span>}
                      </CompanionElement>
                    );
                  })}
                </div>
                {processedCompanions.some(c => !c.hasCategory) && (
                  <p class="companions-note">* Estas plantas no tienen guía de cultivo disponible</p>
                )}
              </div>
            )}

            {processedAvoidPlants.length > 0 && (
              <div class="companions-section">
                <h4 class="companions-title bad">❌ Evitar Plantar Cerca</h4>
                <div class="companions-list">
                  {processedAvoidPlants.map(avoid => {
                    const AvoidElement = avoid.hasCategory ? 'a' : 'span';
                    return (
                      <AvoidElement
                        href={avoid.hasCategory ? `/calendario/categoria/${avoid.categorySlug}/` : undefined}
                        class={`companion-tag bad ${avoid.hasCategory ? 'clickable' : 'no-link'}`}
                        key={avoid.originalName}
                        title={avoid.hasCategory ? `Ver calendario de ${avoid.translatedName}` : `${avoid.translatedName} (no disponible)`}
                      >
                        <span class="companion-icon">{ui.getCategoryIcon(avoid.categorySlug || 'default')}</span>
                        {avoid.translatedName}
                        {!avoid.hasCategory && <span class="no-link-indicator">*</span>}
                      </AvoidElement>
                    );
                  })}
                </div>
                {processedAvoidPlants.some(a => !a.hasCategory) && (
                  <p class="companions-note">* Estas plantas no tienen guía de cultivo disponible</p>
                )}
              </div>
            )}
          </section>
        )}

        <!-- Plant Details -->
        <section class="details-card">
          <h3>🌿 Información de la Planta</h3>
          <div class="plant-details-grid">
            {plantInfo.family && (
              <div class="plant-detail-item">
                <span class="detail-icon">🏛️</span>
                <div>
                  <strong>Familia</strong>
                  <p>{plantInfo.family}</p>
                </div>
              </div>
            )}

            {plantInfo.type && (
              <div class="plant-detail-item">
                <span class="detail-icon">🔄</span>
                <div>
                  <strong>Tipo</strong>
                  <p>{ui.formatTaskName(plantInfo.type)}</p>
                </div>
              </div>
            )}

            {plantInfo.difficulty && (
              <div class="plant-detail-item">
                <span class="detail-icon">{plantInfo.difficulty === 'easy' ? '😊' : plantInfo.difficulty === 'intermediate' ? '🤔' : '😰'}</span>
                <div>
                  <strong>Dificultad</strong>
                  <p>{ui.formatTaskName(plantInfo.difficulty)}</p>
                </div>
              </div>
            )}

            {plantInfo.origin && (
              <div class="plant-detail-item">
                <span class="detail-icon">{getOriginFlag(plantInfo.origin)}</span>
                <div>
                  <strong>Origen</strong>
                  <p>{ui.formatOriginName(plantInfo.origin)}</p>
                </div>
              </div>
            )}

            {plantInfo.common_names && plantInfo.common_names.length > 0 && (
              <div class="plant-detail-item">
                <span class="detail-icon">📝</span>
                <div>
                  <strong>Otros Nombres</strong>
                  <p>{plantInfo.common_names.join(', ')}</p>
                </div>
              </div>
            )}

            {growingConditions.special_care && (
              <div class="plant-detail-item special-care">
                <span class="detail-icon">⚠️</span>
                <div>
                  <strong>Cuidados Especiales</strong>
                  {typeof growingConditions.special_care === 'string' ? (
                    <p>{growingConditions.special_care}</p>
                  ) : (
                    <div class="special-care-details">
                      {growingConditions.special_care.water_restriction && (
                        <p>
                          <strong>Restricción de riego:</strong> {
                            growingConditions.special_care.water_restriction.months && 
                            `Durante ${growingConditions.special_care.water_restriction.months.map(m => ui.getMonthName(m)).join(', ')} `
                          }
                          {growingConditions.special_care.water_restriction.purpose === 'flavor_intensification' && 
                            'para intensificar el sabor'
                          }
                        </p>
                      )}
                      {Object.entries(growingConditions.special_care).filter(([key]) => key !== 'water_restriction').map(([key, value]) => (
                        <p><strong>{ui.formatTaskName(key)}:</strong> {typeof value === 'string' ? value : JSON.stringify(value)}</p>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            )}
          </div>
        </section>

        <!-- Flower Data (for flowering plants) -->
        {Object.keys(flowerData).length > 0 && (
          <section class="details-card">
            <h3>🌸 Características de la Flor</h3>
            <div class="flower-details-grid">
              {flowerData.colors && flowerData.colors.length > 0 && (
                <div class="flower-detail-item">
                  <span class="detail-icon">🎨</span>
                  <div>
                    <strong>Colores</strong>
                    <p>{flowerData.colors.map(color => ui.formatTaskName(color)).join(', ')}</p>
                  </div>
                </div>
              )}

              {flowerData.fragrance && (
                <div class="flower-detail-item">
                  <span class="detail-icon">👃</span>
                  <div>
                    <strong>Fragancia</strong>
                    <p>{ui.formatTaskName(flowerData.fragrance)}</p>
                  </div>
                </div>
              )}

              {flowerData.size && (
                <div class="flower-detail-item">
                  <span class="detail-icon">📏</span>
                  <div>
                    <strong>Tamaño</strong>
                    <p>{ui.formatTaskName(flowerData.size)}</p>
                  </div>
                </div>
              )}

              {flowerData.flower_shape && (
                <div class="flower-detail-item">
                  <span class="detail-icon">⭕</span>
                  <div>
                    <strong>Forma</strong>
                    <p>{ui.formatTaskName(flowerData.flower_shape)}</p>
                  </div>
                </div>
              )}

              {flowerData.bloom_duration && (
                <div class="flower-detail-item">
                  <span class="detail-icon">⏰</span>
                  <div>
                    <strong>Duración de Floración</strong>
                    <p>{ui.formatTaskName(flowerData.bloom_duration)}</p>
                  </div>
                </div>
              )}
            </div>
          </section>
        )}

        <!-- Enhanced Nutritional Data (for edible plants) -->
        {(Object.keys(nutritionalData).length > 0 || plantCalendar.fruit_data?.nutritional_highlights) && (
          <section class="details-card enhanced-nutrition-section">
            <h3>🍎 Información Nutricional</h3>
            
            <!-- Basic Nutritional Stats -->
            <div class="nutrition-stats-grid">
              {nutritionalData.calories_per_100g && (
                <div class="nutrition-stat primary">
                  <div class="stat-icon">⚡</div>
                  <div class="stat-content">
                    <div class="stat-value">{nutritionalData.calories_per_100g}</div>
                    <div class="stat-label">kcal/100g</div>
                  </div>
                </div>
              )}

              {nutritionalData.water_content && (
                <div class="nutrition-stat secondary">
                  <div class="stat-icon">💧</div>
                  <div class="stat-content">
                    <div class="stat-value">{nutritionalData.water_content}%</div>
                    <div class="stat-label">agua</div>
                  </div>
                </div>
              )}

              {nutritionalData.sugar_content && (
                <div class="nutrition-stat secondary">
                  <div class="stat-icon">🍯</div>
                  <div class="stat-content">
                    <div class="stat-value">{ui.formatTaskName(nutritionalData.sugar_content)}</div>
                    <div class="stat-label">azúcares</div>
                  </div>
                </div>
              )}

              {nutritionalData.acidity && (
                <div class="nutrition-stat secondary">
                  <div class="stat-icon">🍋</div>
                  <div class="stat-content">
                    <div class="stat-value">{ui.formatTaskName(nutritionalData.acidity)}</div>
                    <div class="stat-label">acidez</div>
                  </div>
                </div>
              )}
            </div>

            <!-- Flavor Profile -->
            {nutritionalData.flavor_profile && (
              <div class="nutrition-section flavor-section">
                <div class="section-title">
                  <span class="section-icon">👅</span>
                  <span>Perfil de Sabor</span>
                </div>
                <div class="flavor-badge">
                  {ui.formatTaskName(nutritionalData.flavor_profile)}
                </div>
              </div>
            )}

            <!-- Main Nutrients & Vitamins -->
            {(nutritionalData.main_nutrients || nutritionalData.vitamin_content || plantCalendar.fruit_data?.nutritional_highlights) && (
              <div class="nutrition-section nutrients-section">
                <div class="section-title">
                  <span class="section-icon">🧬</span>
                  <span>Nutrientes Principales</span>
                </div>
                <div class="nutrients-grid">
                  {nutritionalData.main_nutrients && nutritionalData.main_nutrients.map(nutrient => (
                    <div key={nutrient} class="nutrient-badge">
                      <span class="nutrient-icon">{getNutrientIcon(nutrient)}</span>
                      <span class="nutrient-name">{ui.formatTaskName(nutrient)}</span>
                    </div>
                  ))}
                  
                  {nutritionalData.vitamin_content && nutritionalData.vitamin_content.map(vitamin => (
                    <div key={vitamin} class="nutrient-badge">
                      <span class="nutrient-icon">{getNutrientIcon(`vitamin_${vitamin.toLowerCase()}`)}</span>
                      <span class="nutrient-name">Vitamina {vitamin}</span>
                    </div>
                  ))}

                  {plantCalendar.fruit_data?.nutritional_highlights && plantCalendar.fruit_data.nutritional_highlights.map(highlight => (
                    <div key={highlight} class="nutrient-badge">
                      <span class="nutrient-icon">{getNutrientIcon(highlight)}</span>
                      <span class="nutrient-name">{ui.formatTaskName(highlight)}</span>
                    </div>
                  ))}
                </div>
              </div>
            )}

            <!-- Health Benefits -->
            {nutritionalData.health_benefits && nutritionalData.health_benefits.length > 0 && (
              <div class="nutrition-section benefits-section">
                <div class="section-title">
                  <span class="section-icon">💪</span>
                  <span>Beneficios para la Salud</span>
                </div>
                <div class="benefits-list">
                  {nutritionalData.health_benefits.map(benefit => (
                    <div key={benefit} class="benefit-item">
                      <span class="benefit-icon">✓</span>
                      <span class="benefit-text">{ui.formatTaskName(benefit)}</span>
                    </div>
                  ))}
                </div>
              </div>
            )}

            <!-- Additional Properties -->
            {nutritionalData.properties && nutritionalData.properties.length > 0 && (
              <div class="nutrition-section properties-section">
                <div class="section-title">
                  <span class="section-icon">⭐</span>
                  <span>Propiedades Adicionales</span>
                </div>
                <div class="properties-tags">
                  {nutritionalData.properties.map(property => (
                    <span key={property} class="property-tag">
                      {ui.formatTaskName(property)}
                    </span>
                  ))}
                </div>
              </div>
            )}

            <!-- Technical Details -->
            {nutritionalData.brix_level && (
              <div class="nutrition-section technical-section">
                <div class="section-title">
                  <span class="section-icon">🔬</span>
                  <span>Detalles Técnicos</span>
                </div>
                <div class="technical-details">
                  <div class="technical-item">
                    <span class="tech-label">Nivel Brix:</span>
                    <span class="tech-value">{nutritionalData.brix_level[0]}-{nutritionalData.brix_level[1]}°</span>
                  </div>
                </div>
              </div>
            )}

          </section>
        )}

        <!-- Additional Harvest Information -->
        {(harvestData.harvest_indicators || harvestData.yield_per_plant || harvestData.best_harvest_time || harvestData.post_harvest_care || harvestData.fiber_yield || harvestData.seed_yield || harvestData.uses || harvestData.fiber_quality) && (
          <section class="details-card">
            <h3>📈 Detalles de Cosecha</h3>
            <div class="harvest-details-grid">
              {harvestData.harvest_indicators && harvestData.harvest_indicators.length > 0 && (
                <div class="harvest-detail-item">
                  <span class="detail-icon">🎯</span>
                  <div>
                    <strong>Indicadores de Cosecha</strong>
                    <p>{harvestData.harvest_indicators.map(indicator => ui.formatTaskName(indicator)).join(', ')}</p>
                  </div>
                </div>
              )}

              {harvestData.yield_per_plant && (
                <div class="harvest-detail-item">
                  <span class="detail-icon">🌾</span>
                  <div>
                    <strong>Rendimiento por Planta</strong>
                    <p>{harvestData.yield_per_plant}</p>
                  </div>
                </div>
              )}

              {harvestData.best_harvest_time && (
                <div class="harvest-detail-item">
                  <span class="detail-icon">🕐</span>
                  <div>
                    <strong>Mejor Hora de Cosecha</strong>
                    <p class="harvest-time-text">{ui.formatTaskName(harvestData.best_harvest_time)}</p>
                  </div>
                </div>
              )}

              {harvestData.post_harvest_care && (
                <div class="harvest-detail-item">
                  <span class="detail-icon">🧼</span>
                  <div>
                    <strong>Cuidado Post-Cosecha</strong>
                    <p>{ui.formatTaskName(harvestData.post_harvest_care)}</p>
                  </div>
                </div>
              )}

              {harvestData.fiber_yield && (
                <div class="harvest-detail-item">
                  <span class="detail-icon">🧵</span>
                  <div>
                    <strong>Rendimiento de Fibra</strong>
                    <p>{ui.formatTaskName(harvestData.fiber_yield)}</p>
                  </div>
                </div>
              )}

              {harvestData.seed_yield && (
                <div class="harvest-detail-item">
                  <span class="detail-icon">🌰</span>
                  <div>
                    <strong>Rendimiento de Semillas</strong>
                    <p>{ui.formatTaskName(harvestData.seed_yield)}</p>
                  </div>
                </div>
              )}

              {harvestData.uses && harvestData.uses.length > 0 && (
                <div class="harvest-detail-item">
                  <span class="detail-icon">🔧</span>
                  <div>
                    <strong>Usos</strong>
                    <p>{harvestData.uses.map(use => ui.formatTaskName(use)).join(', ')}</p>
                  </div>
                </div>
              )}

              {harvestData.fiber_quality && (
                <div class="harvest-detail-item">
                  <span class="detail-icon">💪</span>
                  <div>
                    <strong>Calidad de Fibra</strong>
                    <p>{ui.formatTaskName(harvestData.fiber_quality)}</p>
                  </div>
                </div>
              )}
            </div>
          </section>
        )}
      </div>

      <!-- Back Navigation -->
      <div class="back-navigation">
        <a href={`/calendario/categoria/${category}/`} class="back-link">
          ← Volver a {categoryName}
        </a>
        <a href="/calendario/" class="back-link">
          Calendario Principal
        </a>
      </div>
    </div>
  </div>

  <!-- Structured Data for Plant Calendar -->
  <script type="application/ld+json" set:html={JSON.stringify({
    "@context": "https://schema.org",
    "@type": ["FAQPage", "HowTo"],
    "name": `Cómo cultivar ${plantName}: calendario de siembra y cosecha`,
    "description": `Guía paso a paso para cultivar ${plantName} con calendario detallado de siembra, trasplante y cosecha`,
    "totalTime": "PT365D",
    "estimatedCost": {
      "@type": "MonetaryAmount",
      "currency": "EUR",
      "value": "5-15"
    },
    "tool": [
      {
        "@type": "HowToTool",
        "name": `Semillas de ${plantName}`
      },
      {
        "@type": "HowToTool", 
        "name": "Tierra de cultivo"
      },
      {
        "@type": "HowToTool",
        "name": "Regadera"
      }
    ],
    "step": [
      {
        "@type": "HowToStep",
        "name": "Preparación y siembra",
        "text": `Planifica la siembra según el calendario estacional específico para ${plantName}`,
        "image": "https://plantasyflores.online/wp-content/uploads/semillas.webp"
      },
      {
        "@type": "HowToStep", 
        "name": "Trasplante",
        "text": "Trasplanta las plántulas en el momento óptimo según las condiciones climáticas",
        "image": "https://plantasyflores.online/wp-content/uploads/trasplante.webp"
      },
      {
        "@type": "HowToStep",
        "name": "Cuidados y mantenimiento", 
        "text": "Proporciona los cuidados necesarios durante el ciclo de crecimiento",
        "image": "https://plantasyflores.online/wp-content/uploads/cuidados.webp"
      },
      {
        "@type": "HowToStep",
        "name": "Cosecha",
        "text": "Cosecha en el momento óptimo para obtener la mejor calidad",
        "image": "https://plantasyflores.online/wp-content/uploads/cosecha.webp"
      }
    ],
    "mainEntity": schemaFAQ.map(faq => ({
      "@type": "Question",
      "name": faq.question,
      "acceptedAnswer": {
        "@type": "Answer",
        "text": faq.answer
      }
    })),
    "about": {
      "@type": "Thing",
      "name": plantName,
      ...(plantInfo.scientific_name ? { "scientificName": plantInfo.scientific_name } : {}),
      "category": categoryName
    },
    "author": {
      "@type": "Organization",
      "name": "Plantas y Flores",
      "url": "https://plantasyflores.online"
    },
    "datePublished": new Date().toISOString(),
    "dateModified": new Date().toISOString()
  })} />

</BaseLayout>

<style>
  .plant-calendar-view {
    min-height: 100vh;
    background: #fcfdfe;
  }

  /* Modern Header Styles */
  .modern-header {
    position: relative;
  }

  /* Breadcrumb Navigation */
  .breadcrumb-nav {
    background: #fcfdfe;
    border-bottom: 1px solid #e2e8f0;
    border-radius: 0 0 12px 12px;
    padding: 1rem 0;
  }

  .breadcrumb-container {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .breadcrumb-link {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: #4a5568;
    text-decoration: none;
    font-weight: 500;
    font-size: 0.9rem;
    padding: 0.5rem 0.75rem;
    border-radius: 6px;
    transition: all 0.3s ease;
  }

  .breadcrumb-link:hover {
    background: #f7fafc;
    color: #2d3748;
  }

  .breadcrumb-separator {
    color: #a0aec0;
    font-weight: 300;
  }

  .breadcrumb-current {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: #718096;
    font-weight: 500;
    font-size: 0.9rem;
    padding: 0.5rem 0.75rem;
    background: #f7fafc;
    border-radius: 6px;
  }

  .breadcrumb-icon {
    font-size: 0.9rem;
  }

  /* Hero Header */
  .hero-header {
    padding: 4rem 0 5rem 0;
    position: relative;
    border-bottom: 1px solid #e2e8f0;
    background: linear-gradient(135deg, #48bb7820 0%, #48bb7840 100%);
    border-radius: 16px;
    margin: 16px;
  }

  .hero-content {
    text-align: center;
    max-width: 900px;
    margin: 0 auto;
  }

  .category-badge {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    background: #f7fafc;
    color: #4a5568;
    padding: 0.75rem 1.5rem;
    border-radius: 50px;
    font-size: 0.9rem;
    font-weight: 500;
    margin-bottom: 2rem;
    border: 1px solid #e2e8f0;
  }

  .category-badge-icon {
    font-size: 1rem;
  }

  .plant-title {
    font-size: 3.5rem;
    font-weight: 800;
    color: #1a202c;
    margin-bottom: 1rem;
    line-height: 1.1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .plant-icon-large {
    font-size: 3.5rem;
  }

  .title-text {
    color: #1a202c;
    font-weight: 800;
  }

  .scientific-name {
    font-size: 1.3rem;
    font-style: italic;
    color: #4a5568;
    margin-bottom: 1.5rem;
    font-weight: 400;
  }

  .plant-description {
    font-size: 1.2rem;
    color: #4a5568;
    line-height: 1.6;
    margin-bottom: 3rem;
    max-width: 700px;
    margin-left: auto;
    margin-right: auto;
  }

  .plant-info-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    margin-bottom: 3rem;
    max-width: 800px;
    margin-left: auto;
    margin-right: auto;
  }

  .info-card {
    background: #fcfdfe;
    border: 1px solid #e2e8f0;
    border-radius: 12px;
    padding: 1.5rem;
    display: flex;
    align-items: center;
    gap: 1rem;
    transition: all 0.3s ease;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .info-card:hover {
    background: #f7fafc;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
  }

  .info-icon {
    font-size: 1.5rem;
    flex-shrink: 0;
  }

  .info-content {
    text-align: left;
  }

  .info-label {
    display: block;
    font-size: 0.8rem;
    color: #718096;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    margin-bottom: 0.25rem;
  }

  .info-value {
    display: block;
    font-size: 1rem;
    color: #2d3748;
    font-weight: 600;
  }

  .action-buttons {
    display: flex;
    justify-content: center;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .main-article-btn {
    background: rgba(255, 255, 255, 0.9);
    color: #48bb78;
    padding: 0.75rem 2rem;
    border-radius: 50px;
    text-decoration: none;
    font-weight: 600;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    border: 1px solid rgba(255, 255, 255, 0.2);
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
  }

  .main-article-btn:hover {
    background: white;
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
  }

  .intro-section {
    background: #fcfdfe;
    border-radius: 12px;
    padding: 2rem;
    border: 1px solid #e2e8f0;
    margin-bottom: 2rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    border-left: 4px solid #48bb78;
  }

  .intro-content p {
    color: #4a5568;
    line-height: 1.7;
    margin-bottom: 1rem;
    font-size: 1rem;
  }

  .intro-content p:last-child {
    margin-bottom: 0;
  }

  .intro-content strong {
    color: #2d3748;
    font-weight: 600;
  }


  .container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 1rem;
  }

  .content-container {
    background-color: #fcfdfe;
  }

  .main-content {
    padding: 2rem 1rem;
  }


  .timeline-section {
    background: #fcfdfe;
    border-radius: 12px;
    padding: 2rem;
    border: 1px solid #e2e8f0;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    margin-bottom: 2rem;
  }

  .timeline-section h2 {
    color: #2d3748;
    margin-bottom: 2rem;
    font-size: 1.75rem;
    text-align: center;
  }

  .yearly-timeline {
    overflow-x: auto;
  }

  .timeline-months {
    display: grid;
    grid-template-columns: repeat(12, minmax(200px, 1fr));
    gap: 1rem;
    min-width: 1200px;
  }

  .timeline-month {
    background: #f7fafc;
    border-radius: 8px;
    padding: 1rem;
    min-height: 200px;
    transition: all 0.3s ease;
  }

  .timeline-month.has-activities {
    background: #f0fff4;
    border: 2px solid #c6f6d5;
  }

  .month-header {
    text-align: center;
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid #e2e8f0;
  }

  .month-header h3 {
    margin: 0 0 0.25rem 0;
    color: #2d3748;
    font-size: 1rem;
    font-weight: 600;
  }

  .month-number {
    color: #718096;
    font-size: 0.8rem;
    font-weight: 500;
  }

  .month-activities {
    min-height: 120px;
  }

  .activities-list {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .activity-item {
    background: #fcfdfe;
    border-radius: 4px;
    padding: 0.5rem;
    border-left: 3px solid #e2e8f0;
    font-size: 0.8rem;
    transition: all 0.3s ease;
  }


  .activity-item.high {
    background: #fff5f5;
    border-left-color: #f56565;
  }

  .activity-item.medium {
    background: #fffbf0;
    border-left-color: #ed8936;
  }

  .activity-header {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 0.25rem;
  }

  .activity-icon {
    font-size: 0.9rem;
    width: 16px;
    text-align: center;
  }

  .activity-label {
    font-weight: 600;
    color: #2d3748;
  }

  .activity-details {
    color: #718096;
    font-size: 0.75rem;
    margin-left: 1.5rem;
  }

  .no-activities {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100%;
    color: #a0aec0;
    font-style: italic;
    text-align: center;
  }

  .export-section {
    background: #fcfdfe;
    border-radius: 12px;
    padding: 2rem;
    border: 1px solid #e2e8f0;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    margin-bottom: 2rem;
  }

  .export-wrapper h2 {
    color: #2d3748;
    margin-bottom: 0.5rem;
    font-size: 1.5rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .export-wrapper p {
    color: #718096;
    margin-bottom: 1.5rem;
    font-size: 0.95rem;
  }

  .details-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 2rem;
    margin-bottom: 3rem;
  }

  .details-card {
    background: #fcfdfe;
    border-radius: 12px;
    padding: 2rem;
    border: 1px solid #e2e8f0;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }

  .details-card h3 {
    color: #2d3748;
    margin-bottom: 1.5rem;
    font-size: 1.25rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .conditions-grid, .harvest-info {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .condition-item, .harvest-item {
    display: flex;
    align-items: flex-start;
    gap: 1rem;
    padding: 1rem;
    background: #f7fafc;
    border-radius: 8px;
  }

  .condition-icon, .harvest-icon {
    font-size: 1.5rem;
    width: 32px;
    text-align: center;
    flex-shrink: 0;
  }

  .condition-item strong, .harvest-item strong {
    display: block;
    color: #2d3748;
    margin-bottom: 0.25rem;
  }

  .condition-item p, .harvest-item p {
    color: #4a5568;
    margin: 0;
    font-size: 0.9rem;
  }

  .companions-section {
    margin-bottom: 1.5rem;
  }

  .companions-section:last-child {
    margin-bottom: 0;
  }

  .companions-title {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 0.75rem;
    font-size: 1rem;
  }

  .companions-title.good {
    color: #38a169;
  }

  .companions-title.bad {
    color: #e53e3e;
  }

  .companions-list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .companion-tag {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    padding: 0.5rem 0.75rem;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 500;
    text-decoration: none;
    transition: all 0.3s ease;
  }

  .companion-tag.good {
    background: #c6f6d5;
    color: #22543d;
    border: 1px solid #9ae6b4;
  }

  .companion-tag.good.clickable:hover {
    background: #9ae6b4;
    transform: translateY(-1px);
  }

  .companion-tag.bad {
    background: #fed7d7;
    color: #742a2a;
    border: 1px solid #feb2b2;
  }

  .companion-tag.bad.clickable:hover {
    background: #feb2b2;
    transform: translateY(-1px);
  }

  .companion-tag.no-link {
    cursor: default;
    opacity: 0.7;
  }

  .no-link-indicator {
    font-size: 0.7rem;
    opacity: 0.6;
    margin-left: 0.25rem;
  }

  .companions-note {
    font-size: 0.8rem;
    color: #718096;
    margin-top: 0.5rem;
    margin-bottom: 0;
    font-style: italic;
  }

  .companion-icon {
    font-size: 1rem;
  }

  .back-navigation {
    display: flex;
    justify-content: center;
    gap: 1rem;
    padding: 2rem 0;
  }

  .back-link {
    background: #48bb78;
    color: white;
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    text-decoration: none;
    font-weight: 500;
    transition: background 0.3s ease;
  }

  .back-link:hover {
    background: #5a67d8;
  }

  /* Enhanced Nutritional Section Styles */
  .enhanced-nutrition-section {
    background: #fcfdfe;
    border-radius: 12px;
    padding: 2rem;
    border: 1px solid #e2e8f0;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }

  .nutrition-stats-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
    margin-bottom: 2rem;
  }

  .nutrition-stat {
    display: flex;
    flex-direction: column;
    align-items: center;
    background: #fcfdfe;
    border-radius: 12px;
    padding: 1.5rem 1rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    transition: all 0.3s ease;
  }


  .nutrition-stat.primary {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    transform: scale(1.05);
  }

  .nutrition-stat .stat-icon {
    font-size: 2.5rem;
    margin-bottom: 0.5rem;
  }

  .nutrition-stat.primary .stat-icon {
    font-size: 3rem;
  }

  .stat-content {
    text-align: center;
  }

  .stat-value {
    font-size: 1.5rem;
    font-weight: 700;
    line-height: 1.2;
  }

  .nutrition-stat.primary .stat-value {
    font-size: 2rem;
  }

  .stat-label {
    font-size: 0.8rem;
    opacity: 0.8;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    margin-top: 0.25rem;
  }

  .nutrition-section {
    margin-bottom: 2rem;
  }

  .nutrition-section:last-child {
    margin-bottom: 0;
  }

  .section-title {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-weight: 600;
    color: #2d3748;
    margin-bottom: 1rem;
    font-size: 1.1rem;
  }

  .section-icon {
    font-size: 1.25rem;
  }

  .flavor-badge {
    background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%);
    color: #8b4513;
    padding: 1rem 1.5rem;
    border-radius: 25px;
    font-weight: 600;
    text-align: center;
    font-size: 1rem;
    text-transform: lowercase;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }

  .flavor-badge::first-letter {
    text-transform: uppercase;
  }

  .harvest-time-text {
    text-transform: lowercase;
  }

  .harvest-time-text::first-letter {
    text-transform: uppercase;
  }

  .nutrients-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    gap: 0.75rem;
  }

  .nutrient-badge {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    background: #fcfdfe;
    padding: 0.75rem 1rem;
    border-radius: 25px;
    border: 2px solid #e2e8f0;
    transition: all 0.3s ease;
    font-size: 0.9rem;
  }

  .nutrient-badge:hover {
    border-color: #48bb78;
  }

  .nutrient-icon {
    font-size: 1.25rem;
  }

  .nutrient-name {
    font-weight: 500;
    color: #2d3748;
    text-transform: capitalize;
  }

  .benefits-list {
    display: grid;
    gap: 0.75rem;
  }

  .benefit-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    background: linear-gradient(135deg, #f0fff4 0%, #c6f6d5 100%);
    padding: 1rem 1.25rem;
    border-radius: 12px;
    border-left: 4px solid #48bb78;
    font-size: 0.9rem;
    transition: all 0.3s ease;
  }

  .benefit-item:hover {
    transform: translateX(2px);
  }

  .benefit-icon {
    color: #48bb78;
    font-weight: bold;
    font-size: 1.1rem;
  }

  .benefit-text {
    color: #2d3748;
    font-weight: 500;
    text-transform: capitalize;
  }

  .properties-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .property-tag {
    background: linear-gradient(135deg, #e6fffa 0%, #b2f5ea 100%);
    color: #234e52;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 500;
    text-transform: capitalize;
    border: 1px solid #81e6d9;
    transition: all 0.3s ease;
  }

  .property-tag:hover {
    background: linear-gradient(135deg, #b2f5ea 0%, #81e6d9 100%);
    transform: translateY(-1px);
  }

  .technical-details {
    background: #fcfdfe;
    border-radius: 12px;
    padding: 1rem;
    border: 1px solid #e2e8f0;
    border-left: 4px solid #667eea;
  }

  .technical-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 0.9rem;
  }

  .tech-label {
    color: #4a5568;
    font-weight: 500;
  }

  .tech-value {
    color: #2d3748;
    font-weight: 600;
    background: #f7fafc;
    padding: 0.5rem 0.75rem;
    border-radius: 6px;
  }

  @media (max-width: 768px) {
    .plant-title {
      font-size: 2.5rem;
      flex-direction: column;
      gap: 0.5rem;
    }

    .plant-icon-large {
      font-size: 2.5rem;
    }

    .plant-description {
      font-size: 1rem;
      margin-bottom: 2rem;
    }

    .plant-info-grid {
      grid-template-columns: 1fr;
      gap: 0.75rem;
      margin-bottom: 2rem;
    }

    .info-card {
      padding: 1rem;
    }

    .hero-header {
      padding: 3rem 0 4rem 0;
    }

    .category-badge {
      margin-bottom: 1.5rem;
    }

    .action-buttons {
      flex-direction: column;
      align-items: center;
    }

    .timeline-section {
      padding: var(--space-md);
    }
    
    .yearly-timeline {
      overflow-x: auto;
      -webkit-overflow-scrolling: touch;
    }

    .timeline-months {
      grid-template-columns: repeat(12, 160px);
      gap: var(--space-sm);
    }
    
    .timeline-month {
      min-height: 150px;
      padding: var(--space-sm);
    }
    
    .month-header h3 {
      font-size: 0.9rem;
    }
    
    .activity-item {
      padding: calc(var(--space-xs) * 0.75);
      font-size: 0.75rem;
    }
    
    .activity-label {
      font-size: 0.75rem;
    }
    
    .activity-details {
      font-size: 0.7rem;
      margin-left: 1rem;
    }

    .details-grid {
      grid-template-columns: 1fr;
      gap: var(--space-md);
    }
    
    .details-card {
      padding: var(--space-md);
    }

    .back-navigation {
      flex-direction: column;
      align-items: center;
      gap: var(--space-sm);
    }
    
    .back-link {
      width: 100%;
      max-width: 250px;
      text-align: center;
    }

    .breadcrumb-container {
      gap: 0.5rem;
      flex-wrap: wrap;
    }

    .breadcrumb-link, .breadcrumb-current {
      font-size: 0.8rem;
      padding: 0.5rem;
    }

    /* Mobile Enhanced Nutritional Section */
    .nutrition-stats-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 0.75rem;
      margin-bottom: 1.5rem;
    }

    .nutrition-stat {
      padding: 1rem 0.75rem;
    }

    .nutrition-stat .stat-icon {
      font-size: 2rem;
      margin-bottom: 0.25rem;
    }

    .nutrition-stat.primary .stat-icon {
      font-size: 2.25rem;
    }

    .stat-value {
      font-size: 1.25rem;
    }

    .nutrition-stat.primary .stat-value {
      font-size: 1.5rem;
    }

    .stat-label {
      font-size: 0.7rem;
    }

    .nutrients-grid {
      grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
      gap: 0.5rem;
    }

    .nutrient-badge {
      padding: 0.5rem 0.75rem;
      font-size: 0.8rem;
    }

    .benefit-item {
      padding: 0.75rem 1rem;
      font-size: 0.8rem;
    }

    .properties-tags {
      gap: 0.4rem;
    }

    .property-tag {
      padding: 0.4rem 0.75rem;
      font-size: 0.75rem;
    }

    .flavor-badge {
      padding: 0.75rem 1rem;
      font-size: 0.9rem;
      text-transform: lowercase;
    }

    .flavor-badge::first-letter {
      text-transform: uppercase;
    }

    .harvest-time-text {
      text-transform: lowercase;
    }

    .harvest-time-text::first-letter {
      text-transform: uppercase;
    }

    .section-title {
      font-size: 1rem;
    }
  }
</style>