---
import BaseLayout from '../../../layouts/BaseLayout.astro';
import CalendarBreadcrumb from '../../../components/calendar/CalendarBreadcrumb.vue';
import HeaderExport from '../../../components/HeaderExport.vue';
import ScovilleCard from '../../../components/ScovilleCard.vue';
import PlantHeroHeader from '../../../components/calendar/PlantHeroHeader.vue';
import CalendarTimeline from '../../../components/calendar/CalendarTimeline.vue';
import PlantDetailsGrid from '../../../components/calendar/PlantDetailsGrid.vue';
import NutritionalInfo from '../../../components/calendar/NutritionalInfo.vue';
import HarvestDetails from '../../../components/calendar/HarvestDetails.vue';
import FlowerInfo from '../../../components/calendar/FlowerInfo.vue';
import { getPlantCalendarWithUI, getGlobalCalendarConfig, getUIHelpers, generatePlantPaths, getOriginFlag, getAvailableCalendarCategories } from '../../../utils/calendar-inheritance.js';
import { generatePlantCalendarSchema } from './plant.schema.js';

// Generate static paths for all plants
export async function getStaticPaths() {
  try {
    const plantPaths = await generatePlantPaths();
    
    const result = plantPaths.map(({ params, props }) => ({
      params: { 
        category: params.category,
        plant: params.plant
      },
      props
    }));
    
    return result;
  } catch (error) {
    console.error('Error in getStaticPaths for plants:', error);
    return [];
  }
}

const { category, plant: plantSlug } = Astro.params;

if (!category || !plantSlug) {
  return Astro.redirect('/calendario/');
}

// Get plant calendar data with UI helpers
const plantCalendar = await getPlantCalendarWithUI(category, plantSlug);
const globalConfig = await getGlobalCalendarConfig();
const ui = getUIHelpers(globalConfig);
const availableCategories = await getAvailableCalendarCategories();

if (!plantCalendar || !plantCalendar._inheritance.has_plant_specific && !plantCalendar._inheritance.has_category) {
  return Astro.redirect('/calendario/');
}

const categoryName = ui.formatCategoryName(category);
const plantIndividualName = ui.formatPlantName(plantSlug);
const plantName = `${categoryName} ${plantIndividualName}`;
const categoryIcon = ui.getCategoryIcon(category);

// Process calendar data for timeline view
const timelineData = [];

// Generate 12-month timeline
for (let month = 1; month <= 12; month++) {
  const monthData = {
    month,
    monthName: ui.getMonthName(month),
    activities: []
  };

  const calendar = plantCalendar.calendar_data || {};

  // Check sowing activities
  if (calendar.sowing) {
    if (calendar.sowing.indoor?.best_months?.includes(month)) {
      monthData.activities.push({
        type: 'sowing',
        subtype: 'indoor',
        label: 'Siembra Interior',
        color: ui.getActivityColor('sowing'),
        icon: ui.getTaskIcon('prepare_seedbeds'),
        details: calendar.sowing.indoor.temperature_range ? 
          `${calendar.sowing.indoor.temperature_range[0]}-${calendar.sowing.indoor.temperature_range[1]}°C` : null
      });
    }
    
    if (calendar.sowing.outdoor?.best_months?.includes(month)) {
      monthData.activities.push({
        type: 'sowing',
        subtype: 'outdoor',
        label: 'Siembra Exterior',
        color: ui.getActivityColor('sowing'),
        icon: ui.getTaskIcon('prepare_seedbeds'),
        details: calendar.sowing.outdoor.temperature_range ? 
          `${calendar.sowing.outdoor.temperature_range[0]}-${calendar.sowing.outdoor.temperature_range[1]}°C` : null
      });
    }
  }

  // Check transplanting
  if (calendar.transplanting?.best_months?.includes(month)) {
    monthData.activities.push({
      type: 'transplanting',
      label: 'Trasplante',
      color: ui.getActivityColor('transplanting'),
      icon: ui.getTaskIcon('transplant'),
      details: calendar.transplanting.soil_temperature_min ? 
        `Suelo min: ${calendar.transplanting.soil_temperature_min}°C` : null
    });
  }

  // Check harvesting
  if (calendar.harvesting?.best_months?.includes(month)) {
    const isPeak = calendar.harvesting.peak_months?.includes(month);
    monthData.activities.push({
      type: 'harvesting',
      label: isPeak ? 'Cosecha Principal' : 'Cosecha',
      color: ui.getActivityColor('harvesting'),
      icon: ui.getTaskIcon(isPeak ? 'harvest_main' : 'harvest_early'),
      priority: isPeak ? 'high' : 'medium',
      details: calendar.harvesting.days_to_harvest ? 
        `${calendar.harvesting.days_to_harvest[0]}-${calendar.harvesting.days_to_harvest[1]} días` : null
    });
  }

  // Check flowering (for perennials)
  if (calendar.flowering?.best_months?.includes(month)) {
    const isPeak = calendar.flowering.peak_months?.includes(month);
    monthData.activities.push({
      type: 'flowering',
      label: isPeak ? 'Floración Principal' : 'Floración',
      color: ui.getActivityColor('flowering'),
      icon: ui.getTaskIcon('enjoy_blooms'),
      priority: isPeak ? 'high' : 'medium'
    });
  }

  // Check planting (for perennials)
  if (calendar.planting?.best_months?.includes(month)) {
    monthData.activities.push({
      type: 'planting',
      label: 'Plantación',
      color: ui.getActivityColor('planting'),
      icon: ui.getTaskIcon('prepare_beds')
    });
  }

  // Check monthly tasks (avoid duplicating planting, sowing if already added)
  const monthlyTasks = calendar.care_calendar?.monthly_tasks?.[month.toString()];
  if (monthlyTasks && monthlyTasks.length > 0) {
    // Get already added activity types and subtypes to avoid duplicates
    const existingTypes = monthData.activities.map(a => a.type);
    const existingSubtypes = monthData.activities.map(a => a.subtype).filter(Boolean);
    
    monthlyTasks.forEach(task => {
      // Skip planting task if we already added a planting activity
      if (task === 'planting' && existingTypes.includes('planting')) {
        return;
      }
      
      // Skip sowing tasks if we already added the specific sowing type
      if ((task === 'sowing_indoor' || task === 'sow_indoor') && existingSubtypes.includes('indoor')) {
        return;
      }
      if ((task === 'sowing_outdoor' || task === 'sow_outdoor') && existingSubtypes.includes('outdoor')) {
        return;
      }
      
      // Skip general sowing if we already have any sowing activity
      if (task === 'sowing' && existingTypes.includes('sowing')) {
        return;
      }
      
      // Skip harvesting tasks if we already have general harvesting
      if ((task === 'harvest_winter' || task === 'harvest_summer' || task === 'harvest_early') && existingTypes.includes('harvesting')) {
        return;
      }
      
      // Skip transplanting task if we already added a transplanting activity
      if (task === 'transplant' && existingTypes.includes('transplanting')) {
        return;
      }
      
      // Skip planting tasks if we already have sowing (they're similar)
      if (task === 'planting' && existingTypes.includes('sowing')) {
        return;
      }
      
      monthData.activities.push({
        type: 'care',
        label: ui.formatTaskName(task),
        color: ui.getActivityColor('care'),
        icon: ui.getTaskIcon(task),
        priority: ui.getTaskPriority(task)
      });
    });
  }

  timelineData.push(monthData);
}

// Group plant info
const plantInfo = {
  scientific_name: plantCalendar.plant_info?.scientific_name,
  common_names: plantCalendar.plant_info?.common_names,
  origin: plantCalendar.plant_info?.origin,
  type: plantCalendar.plant_info?.type,
  difficulty: plantCalendar.plant_info?.difficulty,
  family: plantCalendar.plant_info?.family
};

const growingConditions = plantCalendar.growing_conditions || {};
const harvestData = plantCalendar.harvest_data || {};
const nutritionalData = plantCalendar.nutritional_data || {};
const flowerData = plantCalendar.flower_data || {};
const scovilleData = plantCalendar.scoville_data || null;

// Article link
const articleLink = plantCalendar._article_links?.resolved_link;

// Translate companion plant names from English to Spanish and check if they have categories
function translateAndCheckCompanionPlants(companions) {
  const translations = {
    'muscari': 'Muscari',
    'narcisos': 'Narcisos', 
    'crocus': 'Crocus',
    'daffodils': 'Narcisos',
    'snowdrops': 'Campanillas de Invierno',
    'allium': 'Allium',
    'hyacinth': 'Jacinto',
    'iris': 'Iris',
    'fritillaria': 'Fritilaria',
    'scilla': 'Escila',
    'chionodoxa': 'Gloria de las Nieves',
    'galanthus': 'Campanilla de Invierno',
    'narcissus': 'Narciso',
    'basil': 'albahaca',
    'tomato': 'tomate',
    'rose': 'rosa',
    'lavender': 'lavanda',
    'thyme': 'tomillo',
    'chamomile': 'manzanilla',
    'strawberry': 'fresa',
    'chilli': 'chili',
    'potato': 'patata',
    'cabbage': 'col',
    'orchid': 'orquidea',
    'tulip': 'tulipan',
    'hibiscus': 'hibiscus',
    'lily': 'lirios',
    'mango': 'mango',
    'banana': 'plátano',
    'pineapple': 'piña',
    // Traducciones faltantes para companions
    'cotton': 'algodón',
    'maize': 'maíz',
    'corn': 'maíz', 
    'legumes': 'leguminosas',
    'rosemary': 'romero',
    'sage': 'salvia',
    'onion': 'cebolla',
    'garlic': 'ajo',
    'celery': 'apio',
    'parsley': 'perejil',
    'oregano': 'orégano',
    'mint': 'menta',
    'dill': 'eneldo',
    'chives': 'cebollino',
    'walnut': 'nogal',
    'fennel': 'hinojo',
    'borage': 'borraja',
    'marigold': 'margarita',
    'petunia': 'petunia',
    'nasturtium': 'capuchina'
  };
  
  if (!companions || !Array.isArray(companions)) return [];
  
  return companions.map(companion => {
    const translatedName = translations[companion.toLowerCase()] || companion;
    const categoryExists = availableCategories.includes(translatedName.toLowerCase());
    
    return {
      originalName: companion,
      translatedName: translatedName,
      hasCategory: categoryExists,
      categorySlug: categoryExists ? translatedName.toLowerCase() : null
    };
  });
}

const processedCompanions = translateAndCheckCompanionPlants(growingConditions.companion_plants);
const processedAvoidPlants = translateAndCheckCompanionPlants(growingConditions.avoid_plants);

// Generate dynamic Schema FAQ based on plant data
function generateSchemaFAQ() {
  const faq = [];
  const calendar = plantCalendar.calendar_data || {};

  // Universal planting/sowing question - adapts to any plant type
  const hasPlanting = calendar.planting?.best_months;
  const hasSowing = calendar.sowing?.indoor?.best_months || calendar.sowing?.outdoor?.best_months || calendar.sowing?.best_months;
  
  if (hasPlanting || hasSowing) {
    let months = [];
    let verb = "";
    let details = "";
    
    if (hasPlanting) {
      months = calendar.planting.best_months;
      verb = "se planta";
      if (calendar.planting.soil_temperature_max) {
        details += `, cuando la temperatura del suelo esté por debajo de ${calendar.planting.soil_temperature_max}°C`;
      }
      if (calendar.planting.soil_temperature_min) {
        details += `, cuando la temperatura del suelo esté por encima de ${calendar.planting.soil_temperature_min}°C`;
      }
      if (calendar.planting.planting_depth) {
        details += `. Plantar a una profundidad de ${calendar.planting.planting_depth}`;
      }
    } else if (hasSowing) {
      // Handle sowing (seeds)
      if (calendar.sowing.indoor?.best_months) {
        months.push(...calendar.sowing.indoor.best_months);
      }
      if (calendar.sowing.outdoor?.best_months) {
        months.push(...calendar.sowing.outdoor.best_months);
      }
      if (calendar.sowing.best_months) {
        months.push(...calendar.sowing.best_months);
      }
      verb = "se siembra";
      
      if (calendar.sowing.indoor?.temperature_range || calendar.sowing.outdoor?.temperature_range) {
        const tempRange = calendar.sowing.indoor?.temperature_range || calendar.sowing.outdoor?.temperature_range;
        details += `, con temperatura óptima entre ${tempRange[0]}-${tempRange[1]}°C`;
      }
    }
    
    const uniqueMonths = [...new Set(months)].sort();
    const monthNames = uniqueMonths.map(m => ui.getMonthName(m));
    
    let answer = `${plantName} ${verb} `;
    if (monthNames.length <= 2) {
      answer += `en ${monthNames.join(' y ')}`;
    } else {
      answer += `desde ${monthNames[0]} hasta ${monthNames[monthNames.length - 1]}`;
    }
    
    answer += details;
    
    faq.push({
      question: `¿Cuándo ${hasPlanting ? 'plantar' : 'sembrar'} ${plantName}?`,
      answer: answer
    });
  }


  // Universal flowering/harvesting question - adapts to any plant type
  if (calendar.flowering?.best_months) {
    const floweringMonths = calendar.flowering.best_months.map(m => ui.getMonthName(m));
    let answer = `${plantName} florece `;
    if (floweringMonths.length <= 2) {
      answer += `en ${floweringMonths.join(' y ')}`;
    } else {
      answer += `desde ${floweringMonths[0]} hasta ${floweringMonths[floweringMonths.length - 1]}`;
    }
    
    if (calendar.flowering.peak_months) {
      const peakMonths = calendar.flowering.peak_months.map(m => ui.getMonthName(m));
      answer += `, con floración más intensa en ${peakMonths.join(' y ')}`;
    }
    
    if (flowerData?.bloom_duration) {
      answer += `. La floración dura aproximadamente ${flowerData.bloom_duration}`;
    }
    
    faq.push({
      question: `¿Cuándo florece ${plantName}?`,
      answer: answer
    });
  }

  // Universal harvesting question - for any plant with harvest data
  if (calendar.harvesting?.best_months) {
    const harvestMonths = calendar.harvesting.best_months.map(m => ui.getMonthName(m));
    let answer = `La cosecha de ${plantName} se realiza `;
    if (harvestMonths.length <= 2) {
      answer += `en ${harvestMonths.join(' y ')}`;
    } else {
      answer += `desde ${harvestMonths[0]} hasta ${harvestMonths[harvestMonths.length - 1]}`;
    }
    
    if (calendar.harvesting.days_to_harvest) {
      const days = calendar.harvesting.days_to_harvest;
      answer += `, aproximadamente entre ${days[0]}-${days[1]} días después de la siembra`;
    }
    
    if (harvestData?.harvest_indicators?.length > 0) {
      const indicators = harvestData.harvest_indicators.map(ind => ui.formatTaskName(ind));
      answer += `. Indicadores de cosecha: ${indicators.join(', ')}.`;
    }
    
    faq.push({
      question: `¿Cuándo cosechar ${plantName}?`,
      answer: answer
    });
  }

  // Universal transplanting question - for any plant with transplant data  
  if (calendar.transplanting?.best_months) {
    const transplantMonths = calendar.transplanting.best_months.map(m => ui.getMonthName(m));
    let answer = `${plantName} se trasplanta `;
    if (transplantMonths.length <= 2) {
      answer += `en ${transplantMonths.join(' y ')}`;
    } else {
      answer += `desde ${transplantMonths[0]} hasta ${transplantMonths[transplantMonths.length - 1]}`;
    }
    
    if (calendar.transplanting.soil_temperature_min) {
      answer += `, cuando el suelo alcance al menos ${calendar.transplanting.soil_temperature_min}°C`;
    }
    
    answer += '. Es importante esperar a que las plántulas tengan el tamaño adecuado y hayan pasado las últimas heladas.';
    
    faq.push({
      question: `¿Cuándo trasplantar ${plantName}?`,
      answer: answer
    });
  }

  // Care/maintenance question if monthly tasks exist
  const hasCareTasks = Object.values(calendar.care_calendar?.monthly_tasks || {}).some(tasks => tasks.length > 0);
  if (hasCareTasks) {
    let answer = `${plantName} requiere cuidados específicos según la época: `;
    
    const careByMonth = Object.entries(calendar.care_calendar?.monthly_tasks || {})
      .filter(([_, tasks]) => tasks.length > 0)
      .map(([month, tasks]) => ({
        month: ui.getMonthName(parseInt(month)),
        tasks: tasks.map(task => ui.formatTaskName(task)).join(', ')
      }));
    
    if (careByMonth.length > 0) {
      answer += careByMonth.slice(0, 3).map(care => 
        `${care.month}: ${care.tasks}`
      ).join('; ');
      
      if (careByMonth.length > 3) {
        answer += '. Otros cuidados varían según el mes específico.';
      }
    }
    
    faq.push({
      question: `¿Qué cuidados necesita ${plantName}?`,
      answer: answer
    });
  }

  return faq;
}

const schemaFAQ = generateSchemaFAQ();

// Prepare export data
const plantExportData = {
  plantName,
  timelineData
};
---

<BaseLayout 
  title={`Calendario de cultivo del ${plantName.toLowerCase()} ${new Date().getFullYear()}: siembra, trasplante y cosecha`}
  description={`🌱 Guía completa de cultivo para ${plantName}. Calendario detallado con fechas de siembra, trasplante y cosecha. ${plantInfo.scientific_name ? `${plantInfo.scientific_name}. ` : ''}Aprende cuándo y cómo cultivar ${plantName} paso a paso.`}
  keywords={`${plantName}, cultivo ${plantName}, calendario ${plantName}, plantar ${plantName}, sembrar ${plantName}, ${plantInfo.scientific_name || ''}, ${categoryName}`}
  type="article"
  canonical={`https://plantasyflores.online/calendario/${category}/${plantSlug}/`}
  category={categoryName}
  publishedDate={new Date().toISOString()}
  modifiedDate={new Date().toISOString()}
  noAds={true}
>
  <link rel="stylesheet" href={`/styles/calendar-theme.css?v=${Date.now()}`}>
  
  <div class="plant-calendar-view">
    <div class="modern-header">
      <!-- Breadcrumb Navigation -->
      <CalendarBreadcrumb 
        client:load
        additionalCrumbs={[
          { href: `/calendario/categoria/${category}/`, icon: categoryIcon, text: categoryName },
          { icon: categoryIcon, text: plantIndividualName }
        ]}
      />

      <!-- Hero Section -->
      <PlantHeroHeader 
        plantName={plantName}
        categoryIcon={categoryIcon}
        scientificName={plantInfo.scientific_name}
        plantInfo={plantInfo}
        originFlag={getOriginFlag(plantInfo.origin)}
        articleLink={articleLink}
      >
        <HeaderExport 
          slot="export-button"
          client:load
          exportData={plantExportData}
          exportType="plant"
          title={`Calendario ${plantName}`}
        />
      </PlantHeroHeader>
    </div>

    <div class="container content-container main-content">
      
      <!-- Introduction Section -->
      <section class="intro-section">
        <div class="intro-content">
          <p>
            Esta <strong>guía completa de cultivo de {plantName}</strong> te ayuda a planificar la <em>siembra</em>, 
            <em>trasplante</em> y <em>cosecha</em> mes a mes. Este calendario agrícola incluye las mejores fechas 
            para cultivar, cuidados específicos y consejos de jardinería orgánica adaptados a tu zona climática 
            y condiciones locales.
          </p>
          <p>
            <strong>Cómo usar este calendario:</strong> Las actividades mostradas están organizadas por meses, 
            indicando cuándo sembrar, trasplantar y cosechar. Los iconos de color indican la prioridad 
            de cada tarea, y las temperaturas ayudan a determinar el momento exacto según tu zona.
          </p>
        </div>
      </section>

      <!-- Timeline Section -->
      <CalendarTimeline 
        client:visible
        plantName={plantName}
        timelineData={timelineData}
      />

      <!-- Scoville Information (for chili plants) -->
      {scovilleData && (
        <ScovilleCard 
          client:visible
          scovilleData={scovilleData}
        />
      )}

      <!-- Plant Details Grid -->
      <div class="details-grid">
        <PlantDetailsGrid 
          client:visible
          growingConditions={growingConditions}
          harvestData={harvestData}
          plantInfo={plantInfo}
          processedCompanions={processedCompanions}
          processedAvoidPlants={processedAvoidPlants}
          originFlag={getOriginFlag(plantInfo.origin)}
          formatTaskName={ui.formatTaskName}
          formatOriginName={ui.formatOriginName}
          getCategoryIcon={ui.getCategoryIcon}
          getMonthName={ui.getMonthName}
        />

        <!-- Flower Information -->
        <FlowerInfo 
          client:visible
          flowerData={flowerData}
          formatTaskName={ui.formatTaskName}
        />

        <!-- Enhanced Nutritional Data -->
        <NutritionalInfo 
          client:visible
          nutritionalData={nutritionalData}
          fruitData={plantCalendar.fruit_data}
          formatTaskName={ui.formatTaskName}
        />

        <!-- Additional Harvest Information -->
        <HarvestDetails 
          client:visible
          harvestData={harvestData}
          formatTaskName={ui.formatTaskName}
        />
      </div>

      <!-- Back Navigation -->
      <div class="back-navigation">
        <a href={`/calendario/categoria/${category}/`} class="back-link">
          ← Volver a {categoryName}
        </a>
        <a href="/calendario/" class="back-link">
          Calendario Principal
        </a>
      </div>
    </div>
  </div>

  <!-- Structured Data for Plant Calendar -->
  <script type="application/ld+json" set:html={JSON.stringify(generatePlantCalendarSchema(plantName, plantInfo, categoryName, schemaFAQ))}>
  </script>

</BaseLayout>

<style>
  .plant-calendar-view {
    min-height: 100vh;
    background: #fcfdfe;
  }

  /* Modern Header Styles */
  .modern-header {
    position: relative;
  }

  /* Breadcrumb Navigation */
  .breadcrumb-nav {
    background: #fcfdfe;
    border-bottom: 1px solid #e2e8f0;
    border-radius: 0 0 12px 12px;
    padding: 1rem 0;
  }

  .breadcrumb-container {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .breadcrumb-link {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: #4a5568;
    text-decoration: none;
    font-weight: 500;
    font-size: 0.9rem;
    padding: 0.5rem 0.75rem;
    border-radius: 6px;
    transition: all 0.3s ease;
  }

  .breadcrumb-link:hover {
    background: #f7fafc;
    color: #2d3748;
  }

  .breadcrumb-separator {
    color: #a0aec0;
    font-weight: 300;
  }

  .breadcrumb-current {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: #718096;
    font-weight: 500;
    font-size: 0.9rem;
    padding: 0.5rem 0.75rem;
    background: #f7fafc;
    border-radius: 6px;
  }

  .breadcrumb-icon {
    font-size: 0.9rem;
  }

  .intro-section {
    background: #fcfdfe;
    border-radius: 12px;
    padding: 2rem;
    border: 1px solid #e2e8f0;
    margin-bottom: 2rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    border-left: 4px solid #48bb78;
  }

  .intro-content p {
    color: #4a5568;
    line-height: 1.7;
    margin-bottom: 1rem;
    font-size: 1rem;
  }

  .intro-content p:last-child {
    margin-bottom: 0;
  }

  .intro-content strong {
    color: #2d3748;
    font-weight: 600;
  }

  .container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 1rem;
  }

  .content-container {
    background-color: #fcfdfe;
  }

  .main-content {
    padding: 2rem 1rem;
  }

  .details-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 2rem;
    margin-bottom: 3rem;
  }
  
  @media (max-width: 768px) {
    .details-grid {
      grid-template-columns: 1fr;
    }
  }

  .back-navigation {
    display: flex;
    justify-content: center;
    gap: 1rem;
    padding: 2rem 0;
  }

  .back-link {
    background: #48bb78;
    color: white;
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    text-decoration: none;
    font-weight: 500;
    transition: background 0.3s ease;
  }

  .back-link:hover {
    background: #5a67d8;
  }


    .back-navigation {
      flex-direction: column;
      align-items: center;
      gap: 0.5rem;
    }
    
    .back-link {
      width: 100%;
      max-width: 250px;
      text-align: center;
    }

    .breadcrumb-container {
      gap: 0.5rem;
      flex-wrap: wrap;
    }

    .breadcrumb-link, .breadcrumb-current {
      font-size: 0.8rem;
      padding: 0.5rem;
    }
  }
</style>