---
import BaseLayout from '../../../layouts/BaseLayout.astro';
import HeaderExport from '../../../components/HeaderExport.vue';
import ActivitySection from '../../../components/ActivitySection.vue';
import { getMonthlyTasksWithUI, findPlantsByMonth, getGlobalCalendarConfig, getUIHelpers } from '../../../utils/calendar-inheritance.js';

// Generate static paths for all months using month names
export async function getStaticPaths() {
  const globalConfig = await getGlobalCalendarConfig();
  const ui = getUIHelpers(globalConfig);
  const paths = [];
  
  for (let month = 1; month <= 12; month++) {
    const monthSlug = ui.getMonthSlug(month);
    paths.push({
      params: { month: monthSlug }
    });
  }
  
  return paths;
}

const { month } = Astro.params;
const globalConfig = await getGlobalCalendarConfig();
const ui = getUIHelpers(globalConfig);
const monthNumber = ui.getMonthNumber(month);

// Validate month
if (!monthNumber || monthNumber < 1 || monthNumber > 12) {
  return Astro.redirect('/calendario/');
}

// Get dynamic data with UI helpers
const monthlyData = await getMonthlyTasksWithUI(monthNumber);
const { tasks: monthlyTasks, ui: monthlyUI, monthName, seasonalTips } = monthlyData;

const prevMonth = monthNumber === 1 ? 12 : monthNumber - 1;
const nextMonth = monthNumber === 12 ? 1 : monthNumber + 1;
const prevMonthName = ui.getMonthName(prevMonth);
const nextMonthName = ui.getMonthName(nextMonth);
const prevMonthSlug = ui.getMonthSlug(prevMonth);
const nextMonthSlug = ui.getMonthSlug(nextMonth);

// Get calendar data for this month
const sowingPlants = await findPlantsByMonth(monthNumber, 'sowing');
const harvestingPlants = await findPlantsByMonth(monthNumber, 'harvesting');
const transplantingPlants = await findPlantsByMonth(monthNumber, 'transplanting');


// Generate calendar grid for the month
const currentYear = new Date().getFullYear();
const firstDay = new Date(currentYear, monthNumber - 1, 1).getDay(); // 0 = Sunday
const daysInMonth = new Date(currentYear, monthNumber, 0).getDate();

// Adjust firstDay to start on Monday (0 = Monday)
const adjustedFirstDay = firstDay === 0 ? 6 : firstDay - 1;

// Generate calendar days
const calendarDays = [];
// Empty cells for days before month starts
for (let i = 0; i < adjustedFirstDay; i++) {
  calendarDays.push(null);
}
// Days of the month
for (let day = 1; day <= daysInMonth; day++) {
  calendarDays.push(day);
}

// Group activities by type
const activities = {
  sowing: sowingPlants.length,
  harvesting: harvestingPlants.length,
  transplanting: transplantingPlants.length,
  tasks: Object.keys(monthlyTasks).length
};

// Format plants for components
const formatPlantsForComponents = (plants) => {
  return plants.map(plant => ({
    name: ui.formatPlantName(plant.slug),
    slug: plant.slug,
    category: plant.category,
    icon: ui.getCategoryIcon(plant.category),
    // Add additional data for enhanced display
    difficulty: plant.calendar?.difficulty || '',
    soilType: plant.calendar?.soil_type || '',
    sunRequirement: plant.calendar?.sun_requirement || '',
    waterNeed: plant.calendar?.water_need || '',
    daysToHarvest: plant.calendar?.calendar_data?.harvesting?.days_to_harvest?.join('-') || '',
    storageLife: plant.calendar?.harvest_data?.storage_life || '',
    origin: plant.calendar?.origin || ''
  }));
};

const formattedSowingPlants = formatPlantsForComponents(sowingPlants);
const formattedTransplantingPlants = formatPlantsForComponents(transplantingPlants);
const formattedHarvestingPlants = formatPlantsForComponents(harvestingPlants);

// Prepare export data
const exportData = {
  monthNumber,
  monthName,
  activities: {
    sowing: sowingPlants.map(p => ({ name: ui.formatPlantName(p.slug) })),
    transplanting: transplantingPlants.map(p => ({ name: ui.formatPlantName(p.slug) })),
    harvesting: harvestingPlants.map(p => ({ name: ui.formatPlantName(p.slug) }))
  }
};
---

<BaseLayout 
  title={`Calendario ${monthName} | Qu√© Plantar en ${monthName}`}
  description={`Gu√≠a completa de plantaci√≥n para ${monthName}. Descubre qu√© sembrar, trasplantar y cosechar este mes.`}
>
  <link rel="stylesheet" href="/src/styles/calendar-theme.css">
  <div class="month-view">
    <!-- Header with navigation -->
    <header class="page-header">
      <div class="container">
        <!-- Breadcrumb Navigation -->
        <div class="breadcrumb">
          <a href="/">üè† Inicio</a>
          <span class="separator">‚Üí</span>
          <a href="/calendario/">üìÖ Calendario</a>
          <span class="separator">‚Üí</span>
          <span class="current">{monthName}</span>
        </div>

        <nav class="month-nav">
          <a href={`/calendario/mes/${prevMonthSlug}/`} class="nav-button prev">
            ‚Üê {prevMonthName}
          </a>
          
          <div class="month-title">
            <h1 class="page-title">{monthName} {currentYear}</h1>
            <div class="activities-summary">
              {activities.sowing > 0 && <span class="tag sowing">{activities.sowing} para sembrar</span>}
              {activities.transplanting > 0 && <span class="tag transplanting">{activities.transplanting} para trasplantar</span>}
              {activities.harvesting > 0 && <span class="tag harvesting">{activities.harvesting} para cosechar</span>}
              {activities.tasks > 0 && <span class="tag tasks">{activities.tasks} con tareas</span>}
            </div>
          </div>
          
          <HeaderExport 
            client:load
            exportData={exportData}
            exportType="month"
            title={`Calendario ${monthName} ${currentYear}`}
          />
          
          <a href={`/calendario/mes/${nextMonthSlug}/`} class="nav-button next">
            {nextMonthName} ‚Üí
          </a>
        </nav>
      </div>
    </header>

    <div class="container">

      <!-- Calendar Grid -->
      <section class="calendar-section">
        <h2>üìÖ Calendario de {monthName}</h2>
        
        <div class="calendar-grid">
          <!-- Day headers -->
          <div class="day-header">Lun</div>
          <div class="day-header">Mar</div>
          <div class="day-header">Mi√©</div>
          <div class="day-header">Jue</div>
          <div class="day-header">Vie</div>
          <div class="day-header">S√°b</div>
          <div class="day-header">Dom</div>

          <!-- Calendar days -->
          {calendarDays.map((day, index) => (
            day ? (
              <div class="calendar-day" key={day}>
                <span class="day-number">{day}</span>
                {/* Enhanced activity indicators based on actual plant data and timing */}
                <div class="day-activities">
                  {/* Early month activities (1-10) */}
                  {day <= 10 && (
                    <>
                      {sowingPlants.length > 0 && (
                        <span class="activity-dot sowing" title={`Siembra: ${sowingPlants.length} plantas`}></span>
                      )}
                      {transplantingPlants.length > 0 && (
                        <span class="activity-dot transplanting" title={`Trasplante: ${transplantingPlants.length} plantas`}></span>
                      )}
                    </>
                  )}
                  
                  {/* Mid month activities (11-20) */}
                  {day >= 11 && day <= 20 && (
                    <>
                      {transplantingPlants.length > 0 && (
                        <span class="activity-dot transplanting" title={`Trasplante: ${transplantingPlants.length} plantas`}></span>
                      )}
                      {Object.keys(monthlyTasks).length > 0 && (
                        <span class="activity-dot tasks" title={`Tareas: ${Object.keys(monthlyTasks).length} categor√≠as`}></span>
                      )}
                    </>
                  )}
                  
                  {/* Late month activities (21-31) */}
                  {day >= 21 && (
                    <>
                      {harvestingPlants.length > 0 && (
                        <span class="activity-dot harvesting" title={`Cosecha: ${harvestingPlants.length} plantas`}></span>
                      )}
                      {Object.keys(monthlyTasks).length > 0 && (
                        <span class="activity-dot tasks" title={`Cuidados: ${Object.keys(monthlyTasks).length} categor√≠as`}></span>
                      )}
                    </>
                  )}
                </div>
              </div>
            ) : (
              <div class="calendar-day empty" key={`empty-${index}`}></div>
            )
          ))}
        </div>
      </section>

      <!-- Activities List -->
      <div class="activities-grid">
        <!-- Sowing -->
        <ActivitySection 
          client:visible
          activityType="sowing"
          plants={formattedSowingPlants}
          customTitle="Para Sembrar"
          customIcon="üå±"
        />

        <!-- Transplanting -->
        <ActivitySection 
          client:visible
          activityType="transplanting"
          plants={formattedTransplantingPlants}
          customTitle="Para Trasplantar"
          customIcon="üåø"
        />

        <!-- Harvesting -->
        <ActivitySection 
          client:visible
          activityType="harvesting"
          plants={formattedHarvestingPlants}
          customTitle="Para Cosechar"
          customIcon="üåæ"
        />

        <!-- Monthly Tasks -->
        {Object.keys(monthlyTasks).length > 0 && (
          <section class="activity-section">
            <h3>üìã Tareas del Mes</h3>
            {Object.entries(monthlyTasks).map(([category, plants]) => (
              <div class="category-tasks" key={category}>
                <h4>
                  <span class="category-icon">{ui.getCategoryIcon(category)}</span>
                  {ui.formatCategoryName(category)}
                </h4>
                {Object.entries(plants).map(([plantSlug, tasks]) => (
                  <div class="plant-tasks" key={plantSlug}>
                    <strong>{ui.formatPlantName(plantSlug)}</strong>
                    <ul class="tasks-list">
                      {tasks.map(task => (
                        <li key={task} class={`task-priority-${ui.getTaskPriority(task)}`}>
                          <span class="task-icon">{ui.getTaskIcon(task)}</span>
                          {ui.formatTaskName(task)}
                        </li>
                      ))}
                    </ul>
                  </div>
                ))}
              </div>
            ))}
          </section>
        )}
      </div>

      <!-- Back to dashboard -->
      <div class="back-to-dashboard">
        <a href="/calendario/" class="dashboard-link">
          ‚Üê Volver al Calendario
        </a>
      </div>
    </div>
  </div>
</BaseLayout>

<style>
  .month-view {
    min-height: 100vh;
    background: var(--bg-primary-gradient);
  }

  .breadcrumb {
    display: flex;
    align-items: center;
    margin-bottom: var(--space-lg);
    font-size: var(--font-size-sm);
    opacity: 0.9;
  }

  .breadcrumb a {
    color: white;
    text-decoration: none;
    transition: opacity 0.3s ease;
  }

  .breadcrumb a:hover {
    opacity: 0.8;
  }

  .breadcrumb .separator {
    margin: 0 var(--space-xs);
    opacity: 0.7;
  }

  .breadcrumb .current {
    opacity: 0.7;
    font-weight: 500;
  }

  .month-nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: var(--space-sm);
  }

  .nav-button {
    background: rgba(255, 255, 255, 0.2);
    color: white;
    padding: var(--space-sm) var(--space-md);
    border-radius: var(--radius-sm);
    text-decoration: none;
    font-weight: 500;
    transition: all 0.3s ease;
    white-space: nowrap;
  }

  .nav-button:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: translateY(-1px);
  }

  .month-title {
    text-align: center;
    flex-grow: 1;
  }


  .activities-summary {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: var(--space-xs);
    margin-top: var(--space-xs);
  }

  .activities-summary .tag {
    background: rgba(255, 255, 255, 0.2);
    color: white;
    font-size: var(--font-size-xs);
  }

  .activities-summary .tag.sowing { border-left: 3px solid var(--color-sowing); }
  .activities-summary .tag.transplanting { border-left: 3px solid var(--color-transplanting); }
  .activities-summary .tag.harvesting { border-left: 3px solid var(--color-harvesting); }
  .activities-summary .tag.tasks { border-left: 3px solid var(--color-tasks); }

  .calendar-grid {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 1px;
    background: var(--color-border-light);
    border-radius: var(--radius-sm);
    overflow: hidden;
    margin-bottom: var(--space-lg);
    box-shadow: var(--shadow-sm);
  }

  .day-header {
    background: var(--color-text-secondary);
    color: white;
    padding: var(--space-sm);
    text-align: center;
    font-weight: 600;
    font-size: var(--font-size-sm);
  }

  .calendar-day {
    background: var(--bg-card);
    min-height: 80px;
    padding: var(--space-xs);
    display: flex;
    flex-direction: column;
    position: relative;
    transition: background 0.2s ease;
  }

  .calendar-day.empty {
    background: var(--bg-subtle);
  }

  .calendar-day:hover {
    background: var(--bg-subtle);
  }

  .day-number {
    font-weight: 600;
    color: var(--color-text-primary);
    margin-bottom: calc(var(--space-xs) * 0.5);
  }

  .day-activities {
    display: flex;
    flex-wrap: wrap;
    gap: 2px;
    margin-top: auto;
  }

  .activity-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    display: block;
  }

  .activity-dot.sowing { 
    background: var(--color-sowing); 
    box-shadow: 0 0 0 1px rgba(72, 187, 120, 0.3);
  }
  .activity-dot.transplanting { 
    background: var(--color-transplanting); 
    box-shadow: 0 0 0 1px rgba(237, 137, 54, 0.3);
  }
  .activity-dot.harvesting { 
    background: var(--color-harvesting); 
    box-shadow: 0 0 0 1px rgba(236, 201, 75, 0.3);
  }
  .activity-dot.tasks { 
    background: var(--color-tasks); 
    box-shadow: 0 0 0 1px rgba(66, 153, 225, 0.3);
  }
  
  .calendar-day:hover .activity-dot {
    transform: scale(1.2);
    transition: transform 0.2s ease;
  }

  .export-section {
    background: white;
    border-radius: 12px;
    padding: 2rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    margin-bottom: 2rem;
  }

  .export-wrapper h2 {
    color: #2d3748;
    margin-bottom: 0.5rem;
    font-size: 1.5rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .export-wrapper p {
    color: #718096;
    margin-bottom: 1.5rem;
    font-size: 0.95rem;
  }


  .activities-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    gap: var(--space-lg);
    margin-bottom: var(--space-xl);
  }


  .category-tasks {
    background: white;
    border-radius: 8px;
    padding: 1.5rem;
    margin-bottom: 1rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .category-tasks h4 {
    color: #2d3748;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .category-icon {
    font-size: 1.2rem;
  }

  .plant-tasks {
    margin-bottom: 1rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid #e2e8f0;
  }

  .plant-tasks:last-child {
    border-bottom: none;
    margin-bottom: 0;
    padding-bottom: 0;
  }

  .plant-tasks strong {
    color: #4a5568;
    display: block;
    margin-bottom: 0.5rem;
    text-transform: capitalize;
  }

  .tasks-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .tasks-list li {
    padding: 0.25rem 0;
    font-size: 0.9rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .task-icon {
    width: 20px;
    text-align: center;
    font-size: 1rem;
  }

  .task-priority-high {
    color: #c53030;
    font-weight: 600;
  }

  .task-priority-medium {
    color: #d69e2e;
    font-weight: 500;
  }

  .task-priority-low {
    color: #718096;
  }

  .task-priority-normal {
    color: #4a5568;
  }

  .back-to-dashboard {
    text-align: center;
    padding: 2rem 0;
  }

  .dashboard-link {
    background: #667eea;
    color: white;
    padding: 0.75rem 2rem;
    border-radius: 8px;
    text-decoration: none;
    font-weight: 500;
    transition: background 0.3s ease;
  }

  .dashboard-link:hover {
    background: #5a67d8;
  }

  @media (max-width: 768px) {
    .month-nav {
      flex-direction: column;
      gap: 1rem;
    }

    .month-title h1 {
      font-size: 2rem;
    }

    .nav-button {
      padding: 0.5rem 1rem;
    }

    .activities-grid {
      grid-template-columns: 1fr;
    }

    .calendar-day {
      min-height: 60px;
    }

    .activities-summary {
      flex-direction: column;
      align-items: center;
    }
    
    .breadcrumb {
      flex-wrap: wrap;
      gap: calc(var(--space-xs) * 0.5);
      font-size: 0.8rem;
    }
    
    .calendar-grid {
      font-size: var(--font-size-xs);
      gap: 1px;
    }
    
    .day-header {
      padding: calc(var(--space-xs) * 0.5);
      font-size: 0.7rem;
    }
    
    .calendar-day {
      min-height: 50px;
      padding: calc(var(--space-xs) * 0.5);
    }
    
    .day-number {
      font-size: var(--font-size-xs);
    }
    
    .activity-dot {
      width: 6px;
      height: 6px;
    }
  }
</style>