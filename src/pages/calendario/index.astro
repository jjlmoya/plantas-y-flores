---
import BaseLayout from "../../layouts/BaseLayout.astro";
import CalendarMainBreadcrumb from "../../components/calendar/CalendarMainBreadcrumb.vue";
import CalendarHeroHeader from "../../components/calendar/CalendarHeroHeader.vue";
import QuickActionCards from "../../components/calendar/QuickActionCards.vue";
import AllCategoriesCarousel from "../../components/calendar/AllCategoriesCarousel.vue";
import SmartFiltersSection from "../../components/calendar/SmartFiltersSection.vue";
import MonthlyActivitiesSection from "../../components/calendar/MonthlyActivitiesSection.vue";
import MonthNavigatorCarousel from "../../components/calendar/MonthNavigatorCarousel.vue";
import SeasonalTips from "../../components/calendar/SeasonalTips.vue";
import {
  getMonthlyTasksWithUI,
  getAvailableCalendarCategories,
  getGlobalCalendarConfig,
  getAvailableActivities,
  getCategoryPlantsWithCalendar,
  activityToSlug,
} from "../../utils/calendar-inheritance.js";
import { generateCalendarMainSchema } from "../../schemas/calendar/calendar.index.schema.js";

// Get current month data with UI helpers
const currentMonth = new Date().getMonth() + 1; // 1-12
const monthlyData = await getMonthlyTasksWithUI(currentMonth);
const categories = await getAvailableCalendarCategories();
const activities = await getAvailableActivities();
const globalConfig = await getGlobalCalendarConfig();

const {
  tasks: monthlyTasks,
  ui,
  monthName: currentMonthName,
  seasonalTips,
} = monthlyData;

// Get UI helpers directly to ensure fresh config
const { getUIHelpers } = await import('../../utils/calendar-inheritance.js');
const uiDirect = getUIHelpers(globalConfig);

// Not using sample plants anymore as per user feedback

const nextMonth = currentMonth === 12 ? 1 : currentMonth + 1;
const nextMonthName = ui.getMonthName(nextMonth);

// Load plants data only when filters are needed - optimized with client:visible
const allPlantsWithCalendar = [];
for (const category of categories) {
  const categoryPlants = await getCategoryPlantsWithCalendar(category);
  allPlantsWithCalendar.push(...categoryPlants);
}

// Generate quick navigation months using dynamic month names
const quickNavMonths = Array.from({ length: 12 }, (_, i) => ({
  number: i + 1,
  name: ui.getMonthName(i + 1),
  isCurrent: i + 1 === currentMonth,
}));
---

<BaseLayout
  title={`Calendario de Plantación ${new Date().getFullYear()} | Guía Completa de Cultivo Mes a Mes`}
  description={`📅 Calendario completo de plantación para ${currentMonthName} ${new Date().getFullYear()}. Descubre qué plantar cada mes, cuándo sembrar, trasplantar y cosechar. Guía práctica con 24 categorías de plantas y más de 100 variedades.`}
  keywords="calendario plantación, cuando plantar, sembrar, trasplantar, cosechar, huerto, jardín, agricultura, cultivo"
  type="website"
  canonical="https://plantasyflores.online/calendario/"
  image="/brand/calendar-og.webp"
  noAds={true}
>
  <link rel="stylesheet" href={`/styles/calendar-theme.css?v=${Date.now()}`} />
  
  <!-- Structured Data for Calendar -->
  <script type="application/ld+json" set:html={JSON.stringify(generateCalendarMainSchema())}>
  </script>
  
  <div class="calendar-dashboard">
    <!-- Modern Header -->
    <div class="modern-header">
      <CalendarMainBreadcrumb />
      <CalendarHeroHeader />
    </div>

    <div class="container content-container">
      <!-- Quick Action Cards -->
      <QuickActionCards 
        client:load
        currentMonth={currentMonth}
        allPlantsWithCalendar={allPlantsWithCalendar}
      />

      <!-- Categories Carousel -->
      <AllCategoriesCarousel 
        client:load
        categories={categories}
        allPlantsWithCalendar={allPlantsWithCalendar}
      />

      <!-- Smart Filters Section -->
      <SmartFiltersSection 
        client:visible
        currentMonth={currentMonth}
        categories={categories}
        availableActivities={activities}
        allPlantsWithCalendar={allPlantsWithCalendar}
      />

      <!-- Monthly Activities Section -->
      <MonthlyActivitiesSection 
        client:load
        currentMonthName={currentMonthName}
        currentMonth={currentMonth}
        monthlyTasks={monthlyTasks}
      />

      <!-- Month Navigator Carousel -->
      <MonthNavigatorCarousel 
        client:load
        currentMonth={currentMonth}
        monthsData={quickNavMonths}
        allPlantsWithCalendar={allPlantsWithCalendar}
      />

      <!-- Seasonal Tips -->
      <SeasonalTips 
        client:load
        currentMonthName={currentMonthName}
        seasonalTips={seasonalTips}
      />
    </div>
  </div>
</BaseLayout>

<style>
  .calendar-dashboard {
    min-height: 100vh;
    background: #fcfdfe;
  }

  .modern-header {
    position: relative;
  }

  .container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 1rem;
  }

  .content-container {
    background-color: #fcfdfe;
    padding: 2rem 0;
  }

  /* Modern layout improvements */
  .content-container {
    background-color: #fcfdfe;
    padding: 0;
  }

  /* Add smooth scroll behavior */
  html {
    scroll-behavior: smooth;
  }

  /* Responsive spacing adjustments */
  @media (max-width: 768px) {
    .container {
      padding: 0 0.5rem;
    }
    
    .content-container {
      padding: 0;
    }
  }
</style>

<script>
  // Hemisphere toggle functionality
  document.addEventListener("DOMContentLoaded", function () {
    const hemisphereToggle = document.getElementById("hemisphere-toggle");
    const hemisphereIcon = document.getElementById("hemisphere-icon");

    if (hemisphereToggle && hemisphereIcon) {
      hemisphereToggle.addEventListener("click", function () {
        // Toggle between Northern and Southern hemisphere
        const currentIcon = hemisphereIcon.textContent;
        
        if (currentIcon === "🌎") {
          hemisphereIcon.textContent = "🌏";
          hemisphereToggle.title = "Hemisferio Sur - Cambiar al Norte";
          // Here you could add logic to flip the calendar seasons
        } else {
          hemisphereIcon.textContent = "🌎";
          hemisphereToggle.title = "Hemisferio Norte - Cambiar al Sur";  
        }
        
        // Add rotation animation
        hemisphereIcon.style.transform = "rotate(360deg)";
        setTimeout(() => {
          hemisphereIcon.style.transform = "rotate(0deg)";
        }, 300);
      });
    }
  });
</script>
