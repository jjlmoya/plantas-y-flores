---
import BaseLayout from "../../layouts/BaseLayout.astro";
import CalendarFilters from "../../components/CalendarFilters.vue";
import StatsCard from "../../components/StatsCard.vue";
import CategoryGrid from "../../components/CategoryGrid.vue";
import LoadingSpinner from "../../components/LoadingSpinner.vue";
import {
  getMonthlyTasksWithUI,
  getAvailableCalendarCategories,
  getGlobalCalendarConfig,
  getAvailableActivities,
  getCategoryPlantsWithCalendar,
  activityToSlug,
} from "../../utils/calendar-inheritance.js";

// Get current month data with UI helpers
const currentMonth = new Date().getMonth() + 1; // 1-12
const monthlyData = await getMonthlyTasksWithUI(currentMonth);
const categories = await getAvailableCalendarCategories();
const activities = await getAvailableActivities();
const globalConfig = await getGlobalCalendarConfig();

const {
  tasks: monthlyTasks,
  ui,
  monthName: currentMonthName,
  seasonalTips,
} = monthlyData;

// Get UI helpers directly to ensure fresh config
const { getUIHelpers } = await import('../../utils/calendar-inheritance.js');
const uiDirect = getUIHelpers(globalConfig);

// Not using sample plants anymore as per user feedback

const nextMonth = currentMonth === 12 ? 1 : currentMonth + 1;
const nextMonthName = ui.getMonthName(nextMonth);

// Load plants data only when filters are needed - optimized with client:visible
const allPlantsWithCalendar = [];
for (const category of categories) {
  const categoryPlants = await getCategoryPlantsWithCalendar(category);
  allPlantsWithCalendar.push(...categoryPlants);
}

// Generate quick navigation months using dynamic month names
const quickNavMonths = Array.from({ length: 12 }, (_, i) => ({
  number: i + 1,
  name: ui.getMonthName(i + 1),
  isCurrent: i + 1 === currentMonth,
}));
---

<BaseLayout
  title={`Calendario de Plantaci√≥n ${new Date().getFullYear()} | Gu√≠a Completa de Cultivo Mes a Mes`}
  description={`üìÖ Calendario completo de plantaci√≥n para ${currentMonthName} ${new Date().getFullYear()}. Descubre qu√© plantar cada mes, cu√°ndo sembrar, trasplantar y cosechar. Gu√≠a pr√°ctica con 24 categor√≠as de plantas y m√°s de 100 variedades.`}
  keywords="calendario plantaci√≥n, cuando plantar, sembrar, trasplantar, cosechar, huerto, jard√≠n, agricultura, cultivo"
  type="website"
  canonical="https://plantasyflores.online/calendario/"
  image="/brand/calendar-og.webp"
  noAds={true}
>
  <link rel="stylesheet" href="/styles/calendar-theme.css" />
  
  <!-- Structured Data for Calendar -->
  <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "WebApplication",
      "name": "Calendario de Plantaci√≥n",
      "description": "Calendario completo de plantaci√≥n para planificar tu huerto y jard√≠n mes a mes",
      "url": "https://plantasyflores.online/calendario/",
      "applicationCategory": "LifestyleApplication",
      "operatingSystem": "Web",
      "offers": {
        "@type": "Offer",
        "price": "0",
        "priceCurrency": "EUR"
      },
      "featureList": [
        "Calendario mensual de plantaci√≥n",
        "Gu√≠as de siembra y trasplante",
        "Cronograma de cosecha",
        "Consejos de cuidado de plantas",
        "Filtros por actividad y categor√≠a"
      ],
      "publisher": {
        "@type": "Organization",
        "name": "Plantas y Flores",
        "url": "https://plantasyflores.online"
      }
    }
  </script>
  
  <div class="calendar-dashboard">
    <!-- Header -->
    <header class="page-header">
      <div class="container">
        <!-- Navigation Header -->
        <div class="nav-header">
          <a href="/" class="home-link" title="Volver al inicio">üè† Inicio</a>

          <!-- Hemisphere Selector -->
          <div class="hemisphere-selector">
            <button
              id="hemisphere-toggle"
              class="hemisphere-toggle"
              title="Cambiar hemisferio"
            >
              <span id="hemisphere-icon">üåé</span>
            </button>
          </div>
        </div>

        <h1 class="page-title">Calendario de Plantaci√≥n</h1>
        <p class="page-subtitle">
          Planifica tu jard√≠n y huerto siguiendo el calendario natural
        </p>
      </div>
    </header>

    <div class="container">
      <!-- Current Month Section -->
      <section class="current-month-section">
        <h2>üå± Este Mes: {currentMonthName}</h2>

        <div class="grid-responsive">
          <!-- Loading Skeleton for Initial Load -->
          <div
            class="dashboard-skeleton"
            id="dashboard-skeleton"
            style="display: none;"
          >
            <div class="skeleton-stats-grid">
              <div class="skeleton-stats-card">
                <div class="skeleton-card-header">
                  <div class="skeleton-line skeleton-title"></div>
                  <div class="skeleton-icon"></div>
                </div>
                <div class="skeleton-card-content">
                  <div class="skeleton-line skeleton-text"></div>
                  <div class="skeleton-line skeleton-text"></div>
                  <div class="skeleton-line skeleton-text short"></div>
                </div>
              </div>
              <div class="skeleton-stats-card">
                <div class="skeleton-card-header">
                  <div class="skeleton-line skeleton-title"></div>
                  <div class="skeleton-icon"></div>
                </div>
                <div class="skeleton-card-content">
                  <div class="skeleton-line skeleton-text"></div>
                  <div class="skeleton-line skeleton-text short"></div>
                </div>
              </div>
              <div class="skeleton-stats-card">
                <div class="skeleton-card-header">
                  <div class="skeleton-line skeleton-title"></div>
                  <div class="skeleton-icon"></div>
                </div>
                <div class="skeleton-card-content">
                  <div class="skeleton-grid">
                    <div class="skeleton-grid-item"></div>
                    <div class="skeleton-grid-item"></div>
                    <div class="skeleton-grid-item"></div>
                    <div class="skeleton-grid-item"></div>
                    <div class="skeleton-grid-item"></div>
                    <div class="skeleton-grid-item"></div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Actual Content -->
          <!-- Tasks Widget -->
          <StatsCard
            client:visible
            title="En Este Mes"
            icon="üõ†Ô∏è"
            variant="warning"
            footerLink={`/calendario/mes/${ui.getMonthSlug(currentMonth)}/`}
            footerText="Ver calendario del mes"
          >
            {
              Object.keys(monthlyTasks).length > 0 ? (
                <div class="tasks-list">
                  {Object.entries(monthlyTasks).map(([category, plants]) => (
                    <div class="category-tasks collapsible" key={category}>
                      <h4
                        class="category-header"
                        onclick={`toggleCategory('${category}')`}
                      >
                        <span class="category-icon">
                          {ui.getCategoryIcon(category)}
                        </span>
                        <span class="category-name">
                          {ui.formatCategoryName(category)}
                        </span>
                        <span class="plants-count">
                          ({Object.keys(plants).length} plantas)
                        </span>
                        <span class="collapse-icon">‚ñº</span>
                      </h4>
                      <div class="category-content" id={`category-${category}`}>
                        {Object.entries(plants).map(([plantSlug, tasks]) => (
                          <div class="plant-tasks" key={plantSlug}>
                            <strong>{ui.formatPlantName(plantSlug)}</strong>
                            <ul>
                              {tasks.map((task) => (
                                <li
                                  key={task}
                                  class={`task-priority-${ui.getTaskPriority(task)}`}
                                >
                                  <span class="task-icon">
                                    {ui.getTaskIcon(task)}
                                  </span>
                                  {ui.formatTaskName(task)}
                                </li>
                              ))}
                            </ul>
                          </div>
                        ))}
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <p class="no-tasks">No hay tareas espec√≠ficas este mes</p>
              )
            }
          </StatsCard>

          <!-- Next Month Preview -->

          <!-- Categories Overview -->
          <StatsCard
            client:visible
            title="Categor√≠as Disponibles"
            icon="üåø"
            variant="success"
          >
            <CategoryGrid
              client:visible
              categories={categories.map((cat) => ({ slug: cat, name: cat }))}
              baseUrl="/calendario/categoria/"
              columns="3"
              minWidth="100px"
            />
          </StatsCard>
        </div>
      </section>

      <!-- Quick Navigation -->
      <section class="section-spacing">
        <h2>Navegar por Meses</h2>
        <div class="months-grid">
          {
            quickNavMonths.map((month) => (
              <a
                href={`/calendario/mes/${ui.getMonthSlug(month.number)}/`}
                class={`month-link ${month.isCurrent ? "current" : ""}`}
                key={month.number}
              >
                <span class="month-number">{month.number}</span>
                <span class="month-name">{month.name}</span>
              </a>
            ))
          }
        </div>
      </section>

      <!-- Filters Section -->
      <section class="section-spacing">
        <h2>Explorar y Filtrar Plantas</h2>
        <p>Encuentra plantas espec√≠ficas seg√∫n tus necesidades y experiencia</p>

        <div class="filters-container">
          <CalendarFilters
            client:visible
            plants={allPlantsWithCalendar}
            availableCategories={categories}
            availableActivities={activities}
            currentMonth={currentMonth}
          />
        </div>
      </section>

      <!-- Activities Section -->
      <section class="section-spacing">
        <h2>Explorar por Actividades</h2>
        <p>
          Encuentra todas las plantas organizadas por tipo de actividad de
          jardiner√≠a
        </p>

        <div class="activities-grid">
          {
            activities.map((activity) => (
              <a
                href={`/calendario/actividad/${activityToSlug(activity)}/`}
                class="activity-card"
                key={activity}
              >
                <div class="activity-header">
                  <span class="activity-icon">{uiDirect.getTaskIcon(activity)}</span>
                  <h3>{uiDirect.formatTaskName(activity)}</h3>
                </div>
                <p>
                  Ver todas las plantas para{" "}
                  {uiDirect.formatTaskName(activity).toLowerCase()}
                </p>
              </a>
            ))
          }
        </div>
      </section>

      <!-- Tips Section -->
      <section class="tips-section">
        <h2>üí° Consejos de {currentMonthName}</h2>
        <div class="tips-grid">
          {
            seasonalTips.temperature && (
              <div class="tip-card">
                <h3>üå°Ô∏è Temperatura</h3>
                <p>{seasonalTips.temperature}</p>
              </div>
            )
          }

          {
            seasonalTips.watering && (
              <div class="tip-card">
                <h3>üíß Riego</h3>
                <p>{seasonalTips.watering}</p>
              </div>
            )
          }

          {
            seasonalTips.sunlight && (
              <div class="tip-card">
                <h3>‚òÄÔ∏è Sol</h3>
                <p>{seasonalTips.sunlight}</p>
              </div>
            )
          }
        </div>
      </section>
    </div>
  </div>
</BaseLayout>

<style>
  .calendar-dashboard {
    min-height: 100vh;
    background: var(--bg-primary-gradient);
  }

  .nav-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--space-lg);
  }

  .home-link {
    color: white;
    text-decoration: none;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-weight: 500;
    transition: opacity 0.3s ease;
  }

  .home-link:hover {
    opacity: 0.8;
  }

  .hemisphere-selector {
    position: relative;
  }

  .hemisphere-toggle {
    background: rgba(255, 255, 255, 0.2);
    border: 1px solid rgba(255, 255, 255, 0.3);
    color: white;
    width: 48px;
    height: 48px;
    border-radius: 50%;
    cursor: pointer;
    font-size: var(--font-size-xl);
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
  }

  .hemisphere-toggle:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: scale(1.05);
  }

  .current-month-section {
    margin-bottom: var(--space-xl);
  }

  .current-month-section h2,
  section h2 {
    font-size: var(--font-size-3xl);
    margin-bottom: var(--space-md);
    color: var(--color-text-primary);
  }

  section p {
    color: var(--color-text-secondary);
    margin-bottom: var(--space-md);
    font-size: var(--font-size-lg);
  }

  .category-tasks {
    margin-bottom: var(--space-sm);
    border: 1px solid var(--color-border-light);
    border-radius: var(--radius-sm);
    overflow: hidden;
  }

  .category-header {
    color: var(--color-text-secondary);
    font-size: var(--font-size-lg);
    margin: 0;
    padding: var(--space-sm);
    display: flex;
    align-items: center;
    gap: var(--space-xs);
    cursor: pointer;
    background: var(--bg-subtle);
    border: none;
    width: 100%;
    text-align: left;
    transition: all 0.3s ease;
    user-select: none;
    justify-content: space-between;
  }

  .category-header:hover {
    background: var(--bg-card);
    color: var(--color-text-primary);
  }

  .category-header .category-name {
    flex: 1;
  }

  .plants-count {
    font-size: var(--font-size-sm);
    color: var(--color-text-muted);
    font-weight: normal;
  }

  .collapse-icon {
    font-size: var(--font-size-sm);
    transition: transform 0.3s ease;
    font-weight: bold;
  }

  .category-tasks.collapsed .collapse-icon {
    transform: rotate(-90deg);
  }

  .category-content {
    max-height: 1000px;
    overflow: hidden;
    transition:
      max-height 0.3s ease,
      padding 0.3s ease;
    padding: 0 var(--space-sm) var(--space-sm);
  }

  .category-tasks.collapsed .category-content {
    max-height: 0;
    padding: 0 var(--space-sm);
  }

  .plant-tasks {
    margin-bottom: var(--space-sm);
    padding: var(--space-sm);
    background: var(--bg-subtle);
    border-radius: var(--radius-sm);
    border-left: 3px solid var(--color-primary-light);
  }

  .plant-tasks strong {
    color: var(--color-text-primary);
    display: block;
    margin-bottom: calc(var(--space-xs) * 0.5);
  }

  .plant-tasks ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .plant-tasks li {
    display: flex;
    align-items: center;
    margin-bottom: calc(var(--space-xs) * 0.5);
    font-size: var(--font-size-sm);
    color: var(--color-text-secondary);
    gap: var(--space-xs);
  }

  .task-icon {
    font-weight: bold;
    width: 20px;
    text-align: center;
    flex-shrink: 0;
  }

  .task-priority-high {
    color: var(--color-error);
    font-weight: 600;
  }

  .task-priority-medium {
    color: var(--color-warning);
    font-weight: 500;
  }

  .task-priority-low {
    color: var(--color-text-muted);
  }

  .category-icon {
    font-size: var(--font-size-lg);
    flex-shrink: 0;
  }

  .no-tasks {
    color: var(--color-text-muted);
    font-style: italic;
    text-align: center;
    padding: var(--space-lg);
  }

  .preview-link {
    display: inline-block;
    background: var(--color-primary);
    color: white;
    padding: var(--space-sm) var(--space-md);
    border-radius: var(--radius-sm);
    text-decoration: none;
    transition: all 0.3s ease;
    font-weight: 500;
  }

  .preview-link:hover {
    background: var(--color-primary-light);
    transform: translateY(-1px);
  }

  .months-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));
    gap: var(--space-sm);
    margin-bottom: var(--space-lg);
  }

  .month-link {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: var(--space-sm);
    background: var(--bg-card);
    border-radius: var(--radius-sm);
    text-decoration: none;
    color: var(--color-text-primary);
    transition: all 0.3s ease;
    border: 1px solid var(--color-border-light);
    box-shadow: var(--shadow-sm);
  }

  .month-link:hover {
    background: var(--bg-subtle);
    transform: translateY(-2px);
    box-shadow: var(--shadow-md);
    border-color: var(--color-primary-light);
  }

  .month-link.current {
    background: var(--color-primary);
    color: white;
    border-color: var(--color-primary);
  }

  .month-number {
    font-size: var(--font-size-xl);
    font-weight: 700;
    margin-bottom: calc(var(--space-xs) * 0.5);
  }

  .month-name {
    font-size: var(--font-size-sm);
    font-weight: 500;
    text-align: center;
  }

  .tips-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1rem;
  }

  .tip-card {
    background: white;
    padding: 1.5rem;
    border-radius: 8px;
    border-left: 4px solid #48bb78;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .tip-card h3 {
    margin-bottom: 0.75rem;
    color: #2d3748;
    font-size: 1.1rem;
  }

  .tip-card p {
    color: #4a5568;
    line-height: 1.6;
    margin: 0;
  }

  /* Filters Section */
  .filters-section {
    margin-bottom: 3rem;
  }

  .filters-section h2 {
    font-size: 2rem;
    margin-bottom: 0.5rem;
    color: #2d3748;
    text-align: center;
  }

  .filters-section p {
    text-align: center;
    color: #718096;
    margin-bottom: 2rem;
  }

  .filters-container {
    background: white;
    border-radius: 12px;
    padding: 2rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    border: 1px solid rgba(0, 0, 0, 0.05);
  }

  /* Activities Section */
  .activities-section {
    margin-bottom: 3rem;
  }

  .activities-section h2 {
    font-size: 2rem;
    margin-bottom: 0.5rem;
    color: #2d3748;
    text-align: center;
  }

  .activities-section p {
    text-align: center;
    color: #718096;
    margin-bottom: 2rem;
  }

  .activities-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: var(--space-md);
  }

  .activity-card {
    background: var(--bg-card);
    border-radius: var(--radius-md);
    padding: var(--space-lg);
    box-shadow: var(--shadow-md);
    border: 1px solid var(--color-border);
    text-decoration: none;
    color: inherit;
    transition: all 0.3s ease;
    text-align: center;
  }

  .activity-card:hover {
    transform: translateY(-4px);
    box-shadow: var(--shadow-lg);
    color: inherit;
    border-color: var(--color-primary-light);
  }

  .activity-header {
    margin-bottom: var(--space-sm);
  }

  .activity-icon {
    font-size: var(--font-size-4xl);
    display: block;
    margin-bottom: var(--space-sm);
  }

  .activity-card h3 {
    font-size: var(--font-size-xl);
    margin: 0 0 var(--space-sm) 0;
    color: var(--color-text-primary);
  }

  .activity-card p {
    color: var(--color-text-secondary);
    margin: 0;
    font-size: var(--font-size-sm);
  }

  @media (max-width: 768px) {
    .dashboard-header h1 {
      font-size: 2rem;
    }

    .grid-responsive {
      grid-template-columns: 1fr;
      gap: var(--space-md);
    }

    .month-grid {
      grid-template-columns: 1fr;
    }

    .months-grid {
      grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
    }

    .activities-grid {
      grid-template-columns: 1fr;
    }

    .hemisphere-selector {
      top: 0.5rem;
      right: 0.5rem;
    }

    .hemisphere-toggle {
      width: 40px;
      height: 40px;
      font-size: 1.2rem;
    }

    .nav-header {
      flex-direction: column;
      gap: var(--space-sm);
      align-items: stretch;
    }

    .home-link {
      align-self: flex-start;
    }

    .hemisphere-selector {
      align-self: flex-end;
    }

    .current-month-section h2,
    section h2 {
      font-size: var(--font-size-2xl);
    }
  }

  /* Dashboard skeleton styles */
  .dashboard-skeleton {
    animation: skeleton-fade-in 0.3s ease-in-out;
  }

  .skeleton-stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: var(--space-lg);
  }

  .skeleton-stats-card {
    background: var(--bg-card, white);
    border-radius: var(--radius-md, 8px);
    padding: var(--space-lg, 1.5rem);
    box-shadow: var(--shadow-sm, 0 2px 4px rgba(0, 0, 0, 0.1));
  }

  .skeleton-card-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--space-md, 1rem);
  }

  .skeleton-line {
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 200% 100%;
    animation: skeleton-loading 1.5s infinite;
    border-radius: var(--radius-sm, 4px);
    height: 1rem;
  }

  .skeleton-title {
    width: 120px;
    height: 1.5rem;
  }

  .skeleton-text {
    width: 100%;
    height: 1rem;
    margin-bottom: 0.5rem;
  }

  .skeleton-text.short {
    width: 60%;
  }

  .skeleton-icon {
    width: 2.5rem;
    height: 2.5rem;
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 200% 100%;
    animation: skeleton-loading 1.5s infinite;
    border-radius: 50%;
  }

  .skeleton-card-content {
    min-height: 100px;
  }

  .skeleton-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 0.5rem;
  }

  .skeleton-grid-item {
    height: 2rem;
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 200% 100%;
    animation: skeleton-loading 1.5s infinite;
    border-radius: var(--radius-sm, 4px);
  }

  @keyframes skeleton-loading {
    0% {
      background-position: -200% 0;
    }
    100% {
      background-position: 200% 0;
    }
  }

  @keyframes skeleton-fade-in {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .skeleton-line,
    .skeleton-icon,
    .skeleton-grid-item {
      animation: none;
      background: #e0e0e0;
    }
  }

  @media (max-width: 768px) {
    .skeleton-stats-grid {
      grid-template-columns: 1fr;
    }

    .skeleton-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (max-width: 480px) {
    .grid-responsive {
      gap: var(--space-sm);
    }

    .container {
      padding: 0 var(--space-xs);
    }

    .months-grid {
      grid-template-columns: repeat(auto-fill, minmax(80px, 1fr));
      gap: var(--space-xs);
    }

    .skeleton-stats-card {
      padding: var(--space-md, 1rem);
    }
  }
</style>

<script>
  // Hemisphere selector functionality
  let currentHemisphere = "northern";

  // Hemisphere utility functions (client-side versions)
  function getUserHemisphere() {
    if (typeof localStorage === "undefined") return "northern";

    // Check localStorage first
    const saved = localStorage.getItem("calendar-hemisphere");
    if (saved && ["northern", "southern"].includes(saved)) {
      return saved;
    }

    // Try to detect from timezone (rough estimation)
    try {
      const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
      const southernZones = [
        "Australia/",
        "Pacific/Auckland",
        "Pacific/Fiji",
        "America/Argentina",
        "America/Sao_Paulo",
        "America/Santiago",
        "Africa/Johannesburg",
        "Indian/Mauritius",
      ];

      const isSouthern = southernZones.some((zone) => timezone.includes(zone));
      return isSouthern ? "southern" : "northern";
    } catch (error) {
      console.warn("Could not detect hemisphere from timezone:", error);
      return "northern";
    }
  }

  function setUserHemisphere(hemisphere) {
    if (typeof localStorage === "undefined") return;

    if (!["northern", "southern"].includes(hemisphere)) {
      console.warn("Invalid hemisphere:", hemisphere);
      return;
    }

    localStorage.setItem("calendar-hemisphere", hemisphere);

    // Dispatch custom event for components to listen to
    window.dispatchEvent(
      new CustomEvent("hemisphere-changed", {
        detail: { hemisphere },
      })
    );
  }

  // Load saved hemisphere preference
  function initializeHemisphere() {
    currentHemisphere = getUserHemisphere();
    updateHemisphereDisplay();
  }

  function toggleHemisphere() {
    currentHemisphere =
      currentHemisphere === "northern" ? "southern" : "northern";
    setUserHemisphere(currentHemisphere);
    updateHemisphereDisplay();

    // Show notification and reload page to apply changes
    showHemisphereNotification();

    // Reload page after a short delay to apply hemisphere changes
    setTimeout(() => {
      window.location.reload();
    }, 1000);
  }

  function updateHemisphereDisplay() {
    const icon = document.getElementById("hemisphere-icon");
    const toggle = document.getElementById("hemisphere-toggle");

    if (currentHemisphere === "northern") {
      icon.textContent = "üåé";
      toggle.title = "Hemisferio Norte - Cambiar a Sur";
    } else {
      icon.textContent = "üåè";
      toggle.title = "Hemisferio Sur (+6 meses) - Cambiar a Norte";
    }
  }

  function showHemisphereNotification() {
    const notification = document.createElement("div");
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: #48bb78;
      color: white;
      padding: 1rem 1.5rem;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
      z-index: 1000;
      animation: slideIn 0.3s ease;
    `;

    const hemisphere = currentHemisphere === "northern" ? "Norte" : "Sur";
    const adjustment = currentHemisphere === "southern" ? " (+6 meses)" : "";
    notification.innerHTML = `üåç Hemisferio ${hemisphere}${adjustment}`;

    document.body.appendChild(notification);

    // Add animation keyframes
    if (!document.querySelector("#notification-styles")) {
      const style = document.createElement("style");
      style.id = "notification-styles";
      style.textContent = `
        @keyframes slideIn {
          from { transform: translateX(100%); opacity: 0; }
          to { transform: translateX(0); opacity: 1; }
        }
        @keyframes slideOut {
          from { transform: translateX(0); opacity: 1; }
          to { transform: translateX(100%); opacity: 0; }
        }
      `;
      document.head.appendChild(style);
    }

    // Remove notification after 3 seconds
    setTimeout(() => {
      notification.style.animation = "slideOut 0.3s ease";
      setTimeout(() => {
        if (document.body.contains(notification)) {
          document.body.removeChild(notification);
        }
      }, 300);
    }, 3000);
  }

  // Skeleton loading management
  function showSkeleton() {
    const skeleton = document.getElementById("dashboard-skeleton");
    const actualContent = document.querySelector(
      ".grid-responsive > :not(.dashboard-skeleton)"
    );
    if (skeleton && actualContent) {
      skeleton.style.display = "block";
      actualContent.style.display = "none";
    }
  }

  function hideSkeleton() {
    const skeleton = document.getElementById("dashboard-skeleton");
    const actualContent = document.querySelector(
      ".grid-responsive > :not(.dashboard-skeleton)"
    );
    if (skeleton && actualContent) {
      skeleton.style.display = "none";
      actualContent.style.display = "block";
    }
  }

  // Toggle category collapse/expand functionality
  function toggleCategory(categorySlug) {
    const categoryElement = document.querySelector(
      `.category-tasks[key="${categorySlug}"]`
    );
    if (!categoryElement) {
      // Fallback: find by content id
      const contentElement = document.getElementById(
        `category-${categorySlug}`
      );
      if (contentElement) {
        const category = contentElement.closest(".category-tasks");
        if (category) {
          category.classList.toggle("collapsed");
        }
      }
      return;
    }

    categoryElement.classList.toggle("collapsed");
  }

  // Make toggle function globally available
  window.toggleCategory = toggleCategory;

  // Initialize all categories as collapsed by default
  function initializeCollapsibleCategories() {
    const categories = document.querySelectorAll(".category-tasks.collapsible");
    categories.forEach((category) => {
      category.classList.add("collapsed");
    });
  }

  // Initialize display on load
  document.addEventListener("DOMContentLoaded", function () {
    initializeHemisphere();

    // Add click event listener
    const toggle = document.getElementById("hemisphere-toggle");
    if (toggle) {
      toggle.addEventListener("click", toggleHemisphere);
    }

    // Show skeleton initially
    showSkeleton();

    // Hide skeleton after components have likely loaded
    setTimeout(() => {
      hideSkeleton();
      initializeCollapsibleCategories();
    }, 1500);

    // Also hide skeleton when all components are loaded
    window.addEventListener("load", function () {
      setTimeout(() => {
        hideSkeleton();
        initializeCollapsibleCategories();
      }, 300);
    });
  });
</script>
